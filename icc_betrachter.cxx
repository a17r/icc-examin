// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include <fl_i18n/fl_i18n.H>
#include "icc_betrachter.h"
#include "Flmm_Message.H"
#include "icc_gl.h"
#include "icc_draw.h"
#include "icc_kette.h"
#include "icc_oyranos_extern.h"
#include "fl_i18n/fl_i18n.H"
using namespace icc_examin_ns;

const char* iccReadInfo(char* filename) {
  DBG_PROG_START
  char systemBefehl[1024];
  const char *textfile = "/tmp/icc_temp.txt";


  sprintf (systemBefehl, "iccdump \"%s\" > %s",
                                    filename, textfile);
  system (systemBefehl);

  return textfile;
  DBG_PROG_ENDE
}

TagBrowser::TagBrowser(int X,int Y,int W,int H,const char* start_info) : Fl_Hold_Browser(X,Y,W,H,start_info), X(X), Y(Y), W(W), H(H) {
}

TagBrowser::TagBrowser(int X,int Y,int W,int H) : Fl_Hold_Browser(X,Y,W,H), X(X), Y(Y), W(W), H(H) {
}

void TagBrowser::reopen_nicht() {
  DBG_PROG_START
  DBG_PROG_ENDE
}

void TagBrowser::selectItem(int item) {
  DBG_PROG_START
  // selection from tag_browser

  status("")

  item -= 6;
  DBG_PROG_S( item << ". Tag " )
  
  std::string text = icc_examin->selectTag(item);
  if (text != "")
    selectedTagName = text;
  DBG_PROG_V( text );
  DBG_PROG_ENDE
}

int TagBrowser::visible() {
  return Fl_Widget::visible();
}

TagTexts::TagTexts(int X,int Y,int W,int H,const char* start_info) : Fl_Hold_Browser(X,Y,W,H,start_info), X(X), Y(Y), W(W), H(H) {
  cb = NULL;
}

TagTexts::TagTexts(int X,int Y,int W,int H) : Fl_Hold_Browser(X,Y,W,H), X(X), Y(Y), W(W), H(H) {
  cb = NULL;
}

void TagTexts::hinein(std::string text, ICClist<int> patches) {
  DBG_PROG_START
  //show text from tag_browser

      inspekt_topline = this->topline();

      this->clear();

      ICClist <std::string> texte = icc_parser::zeilenNachVector( text );
      int odd = 1;
      unsigned k = 0;
      for (unsigned int i = 0; i < texte.size(); i++)
      {
        std::string text;
        if( patches.size() > k )
        if( patches[k] == (int)i )
        { 
          if(odd) {
#if 0
            char t[8];
            sprintf(t, "%d", k/2); // test for a goof colour @31
            text = "@B";
            text.append( t );
            text.append("@.");
#else
            text = "@B7@.";
#endif
          }
          odd = !odd;
          ++k;
        }

        text.append( texte[i] );
        this->add( text.c_str(), 0);
      }

      this->topline(inspekt_topline);
      this->textfont(FL_COURIER);
      this->textsize(14);
  DBG_PROG_ENDE
}

void TagTexts::hinein(std::string text) {
  DBG_PROG_START
  ICClist<int> patches;
this->hinein( text, patches );
  DBG_PROG_ENDE
}

void TagTexts::selectItem(int item) {
  DBG_PROG_START
  // selection from tag_browser

  const char * txt = 0;
  int i = item;

  status("")

  DBG_PROG_S( item << ". Tag " )
  
  if (cb)
    txt = (*cb) ( &i );

  if(i != item)
    select(i);
  DBG_PROG_ENDE
}
#include <FL/fl_draw.H>

TableChoice::TableChoice(int X,int Y,int W,int H,const char* start_info) : Fl_Choice(X,Y,W,H,start_info), X(X), Y(Y), W(W), H(H) {
  gewaehlter_eintrag = 0;
}

void TableChoice::profilTag(int _tag, std::string text) {
  DBG_PROG_START
  icc_examin->icc_betrachter->tag_nummer = _tag;

// = profile.profil()->printTagInfo(icc_examin->icc_betrachter->tag_nummer);
    sprintf (&typ[0], "%s", profile.profil()->printTagInfo(icc_examin->icc_betrachter->tag_nummer)[1].c_str());

    DBG_PROG_V( profile.profil()->printTagInfo(icc_examin->icc_betrachter->tag_nummer)[1].c_str() )

    Info = icc_parser::zeilenNachVector (text);

    if ( strstr (typ,"mft2") != 0 )
    { DBG_PROG
      Fl_Menu_Item *mft_menue = (Fl_Menu_Item *)calloc (sizeof (Fl_Menu_Item), 6);

      mft_menue[0].text = Info[0].c_str();
      mft_menue[1].text = Info[4].c_str();
      mft_menue[2].text = Info[5].c_str();
      mft_menue[3].text = Info[6].c_str();
      mft_menue[4].text = Info[7].c_str();
      mft_menue[5].text = 0;
      icc_examin->icc_betrachter->table_choice->menu(mft_menue);
    } else
    if ( strstr (typ,"mft1") != 0 )
    {
      Fl_Menu_Item *mft_menue = (Fl_Menu_Item *)calloc (sizeof (Fl_Menu_Item), 6);

      mft_menue[0].text = Info[0].c_str();
      mft_menue[1].text = Info[4].c_str();
      mft_menue[2].text = _("lineare entrance curve with 256 steps");
      mft_menue[3].text = Info[5].c_str();
      mft_menue[4].text = _("lineare exit curve with 256 steps");
      mft_menue[5].text = 0;
      icc_examin->icc_betrachter->table_choice->menu(mft_menue);
    } else
    {
      int count = Info.size();
      Fl_Menu_Item *table_menue = (Fl_Menu_Item *)calloc (sizeof (Fl_Menu_Item),
                                                        count+1);
      for(int i = 0; i < count; ++i)
        table_menue[i].text = Info[i].c_str();
      table_menue[count].text = 0;
      icc_examin->icc_betrachter->table_choice->menu(table_menue);
    }

    icc_examin->icc_betrachter->table_choice->value( gewaehlter_eintrag );

  //auswahlCb();
  DBG_PROG_ENDE
}

void TableChoice::auswahlCb(void) {
  DBG_PROG_START
  //Auswahl aus table_choice

  status("")

  Fl_Menu_* mw = (Fl_Menu_*)this;
  const Fl_Menu_Item* m = mw->mvalue();
  if (!m) {
    DBG_PROG_S("NULL \n")
  } else if (m->shortcut()) {
    DBG_PROG_S("%s - %s \n" << m->label() << fl_shortcut_label(m->shortcut()))
  } else {
    DBG_PROG_S("%s \n" << m->label())
  }

  icc_examin->selectTable( mw->value() );

  DBG_PROG
  DBG_PROG_ENDE
}

My_Fl_Box::My_Fl_Box(int X,int Y,int W, int H, const char* title ) : Fl_Box(X,Y,W,H,title) {
}

int My_Fl_Box::handle( int event ) {
  int ergebnis = event_handler(event);
  if(!ergebnis)
    ;//ergebnis = Fl_Box::handle(event);
  return ergebnis;
}

static void table_gl_menueCb_(Fl_Widget * w, void * data) {
  icc_examin->icc_betrachter->table_gl->menueAufruf( (intptr_t) data );
}

void ICCfltkBetrachter::cb_ja_i(Fl_Button*, void*) {
  ueber->hide();
}
void ICCfltkBetrachter::cb_ja(Fl_Button* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_ja_i(o,v);
}

void ICCfltkBetrachter::cb_vcgt_set_button_i(Fl_Button*, void*) {
  icc_examin->moniSetzen();
}
void ICCfltkBetrachter::cb_vcgt_set_button(Fl_Button* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_vcgt_set_button_i(o,v);
}

void ICCfltkBetrachter::cb_vcgt_reset_button_i(Fl_Button*, void*) {
  icc_examin->standardGamma();
}
void ICCfltkBetrachter::cb_vcgt_reset_button(Fl_Button* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_vcgt_reset_button_i(o,v);
}

void ICCfltkBetrachter::cb_vcgt_load_button_i(Fl_Button*, void*) {
  icc_examin->moniHolen();
}
void ICCfltkBetrachter::cb_vcgt_load_button(Fl_Button* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_vcgt_load_button_i(o,v);
}

void ICCfltkBetrachter::cb_vcgt_close_button_i(Fl_Button*, void*) {
  icc_examin->vcgtStoppen();
}
void ICCfltkBetrachter::cb_vcgt_close_button(Fl_Button* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_vcgt_close_button_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_gl_vrml_speichern_i(Fl_Menu_*, void*) {
  DBG_PROG_START

  icc_examin->gamutSpeichern (icc_examin_ns::GL_VRML);

  DBG_PROG_ENDE;
}
void ICCfltkBetrachter::cb_menueintrag_gl_vrml_speichern(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_gl_vrml_speichern_i(o,v);
}

void ICCfltkBetrachter::cb_Quit_i(Fl_Menu_*, void*) {
  quit();
}
void ICCfltkBetrachter::cb_Quit(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_Quit_i(o,v);
}

void ICCfltkBetrachter::cb_DD_menueintrag_Voll_i(Fl_Menu_* o, void*) {
  Fl_Window *w = o->window();

  if (!fullscreen) {
    px = w->x();
    py = w->y();
    pw = w->w();
    ph = w->h();

    w->fullscreen();
    fullscreen = true;
  } else {
    w->fullscreen_off(px,py,pw,ph);
    fullscreen = false;
  };
}
void ICCfltkBetrachter::cb_DD_menueintrag_Voll(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_DD_menueintrag_Voll_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_gamutwarn_i(Fl_Menu_* o, void*) {
  Fl_Menu_* mw = (Fl_Menu_*)o;
  const Fl_Menu_Item* m = mw->mvalue();

  DBG_PROG_S (m->value())

  icc_examin->gamutwarn(m->value());
}
void ICCfltkBetrachter::cb_menueintrag_gamutwarn(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_gamutwarn_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_phot_intent_i(Fl_Menu_* o, void*) {
  Fl_Menu_* mw = (Fl_Menu_*)o;
  const Fl_Menu_Item* m = mw->mvalue();

  DBG_PROG_S (m->value())

  menueintrag_rel_col_intent->clear();
  menueintrag_abs_col_intent->clear();

  if(m->value())
    icc_examin->intent(0,1);
  else
    icc_examin->intent(-1,1);
}
void ICCfltkBetrachter::cb_menueintrag_phot_intent(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_phot_intent_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_rel_col_intent_i(Fl_Menu_* o, void*) {
  Fl_Menu_* mw = (Fl_Menu_*)o;
  const Fl_Menu_Item* m = mw->mvalue();

  DBG_PROG_S (m->value())

  menueintrag_phot_intent->clear();
  menueintrag_abs_col_intent->clear();

  if(m->value())
    icc_examin->intent(1,1);
  else
    icc_examin->intent(-1,1);
}
void ICCfltkBetrachter::cb_menueintrag_rel_col_intent(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_rel_col_intent_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_abs_col_intent_i(Fl_Menu_* o, void*) {
  Fl_Menu_* mw = (Fl_Menu_*)o;
  const Fl_Menu_Item* m = mw->mvalue();

  DBG_PROG_S (m->value())

  menueintrag_phot_intent->clear();
  menueintrag_rel_col_intent->clear();

  if(m->value())
    icc_examin->intent(3,1);
  else
    icc_examin->intent(-1,1);
}
void ICCfltkBetrachter::cb_menueintrag_abs_col_intent(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_abs_col_intent_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_bpc_i(Fl_Menu_* o, void*) {
  Fl_Menu_* mw = (Fl_Menu_*)o;
  const Fl_Menu_Item* m = mw->mvalue();

  DBG_PROG_S (m->value())

  if(m->value())
    icc_examin->bpc(1);
  else
    icc_examin->bpc(0);
}
void ICCfltkBetrachter::cb_menueintrag_bpc(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_bpc_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_nativeGamut_i(Fl_Menu_* o, void*) {
  Fl_Menu_* mw = (Fl_Menu_*)o;
  const Fl_Menu_Item* m = mw->mvalue();

  DBG_PROG_S (m->value())

  if(m->value())
    icc_examin->nativeGamut(1);
  else
    icc_examin->nativeGamut(0);
}
void ICCfltkBetrachter::cb_menueintrag_nativeGamut(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_nativeGamut_i(o,v);
}

void ICCfltkBetrachter::cb_Show_i(Fl_Menu_*, void*) {
  DBG_PROG_START
  details->show();
  DBG_PROG_ENDE;
}
void ICCfltkBetrachter::cb_Show(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_Show_i(o,v);
}

void ICCfltkBetrachter::cb_Log_i(Fl_Menu_*, void*) {
  log_show();
DBG_NUM_S("Show Log window");
}
void ICCfltkBetrachter::cb_Log(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_Log_i(o,v);
}

Fl_Menu_Item ICCfltkBetrachter::menu_DD_menueleiste[] = {
 {_("File"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Save as VRML"), 0x40073,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_gl_vrml_speichern, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Quit"), 0x40071,  (Fl_Callback*)ICCfltkBetrachter::cb_Quit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("View"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Whole Screen on/off"), 0x40076,  (Fl_Callback*)ICCfltkBetrachter::cb_DD_menueintrag_Voll, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Settings"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Gamut Warning"), 0x40077,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_gamutwarn, 0, 2, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Perceptual"), 0x40066,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_phot_intent, 0, 2, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Relative Colorimetric"), 0x40072,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_rel_col_intent, 0, 2, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Absolute Colorimetric"), 0x40061,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_abs_col_intent, 0, 2, FL_NORMAL_LABEL, 0, 14, 0},
 {_("BPC"), 0x40062,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_bpc, 0, 2, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Native Gamut"), 0x40062,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_nativeGamut, 0, 2, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Windows"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Show Main Window"), 0x4006d,  (Fl_Callback*)ICCfltkBetrachter::cb_Show, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Log"), 0x4006c,  (Fl_Callback*)ICCfltkBetrachter::cb_Log, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_gl_vrml_speichern = ICCfltkBetrachter::menu_DD_menueleiste + 1;
Fl_Menu_Item* ICCfltkBetrachter::DD_menueintrag_Voll = ICCfltkBetrachter::menu_DD_menueleiste + 5;
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_gamutwarn = ICCfltkBetrachter::menu_DD_menueleiste + 8;
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_phot_intent = ICCfltkBetrachter::menu_DD_menueleiste + 9;
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_rel_col_intent = ICCfltkBetrachter::menu_DD_menueleiste + 10;
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_abs_col_intent = ICCfltkBetrachter::menu_DD_menueleiste + 11;
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_bpc = ICCfltkBetrachter::menu_DD_menueleiste + 12;
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_nativeGamut = ICCfltkBetrachter::menu_DD_menueleiste + 13;

void ICCfltkBetrachter::cb_Open_i(Fl_Menu_*, void*) {
  icc_examin->oeffnen();
}
void ICCfltkBetrachter::cb_Open(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_Open_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_html_speichern_i(Fl_Menu_*, void*) {
  DBG_PROG_START

  icc_examin->berichtSpeichern ();

  DBG_PROG_ENDE;
}
void ICCfltkBetrachter::cb_menueintrag_html_speichern(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_html_speichern_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_gamut_speichern_i(Fl_Menu_*, void*) {
  DBG_PROG_START

  icc_examin->gamutSpeichern (icc_examin_ns::ICC_ABSTRACT);

  DBG_PROG_ENDE;
}
void ICCfltkBetrachter::cb_menueintrag_gamut_speichern(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_gamut_speichern_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_gamut_vrml_speichern_i(Fl_Menu_*, void*) {
  DBG_PROG_START

  icc_examin->gamutSpeichern (icc_examin_ns::ICC_VRML);

  DBG_PROG_ENDE;
}
void ICCfltkBetrachter::cb_menueintrag_gamut_vrml_speichern(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_gamut_vrml_speichern_i(o,v);
}

void ICCfltkBetrachter::cb_Quit1_i(Fl_Menu_*, void*) {
  quit();
}
void ICCfltkBetrachter::cb_Quit1(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_Quit1_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_huelle_i(Fl_Menu_*, void*) {
  DBG_PROG_START
  icc_examin->zeig3D();
  DBG_PROG_ENDE;
}
void ICCfltkBetrachter::cb_menueintrag_huelle(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_huelle_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_Voll_i(Fl_Menu_*, void*) {
  Fl_Window *w = (Fl_Window *)details;

  if (!fullscreen) {
    px = w->x();
    py = w->y();
    pw = w->w();
    ph = w->h();

    w->fullscreen();
    fullscreen = true;
  } else {
    w->fullscreen_off(px,py,pw,ph);
    fullscreen = false;
  };
}
void ICCfltkBetrachter::cb_menueintrag_Voll(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_Voll_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_oyranos_i(Fl_Menu_*, void*) {
  icc_examin->oyranos_einstellungen();
}
void ICCfltkBetrachter::cb_menueintrag_oyranos(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_oyranos_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_lang_i(Fl_Menu_*, void*) {
  system("echo $LANG");
# ifdef USE_GETTEXT
  DBG_NUM_S( "domain     : " << textdomain(NULL) );
  DBG_NUM_S( "domain_path: " << bindtextdomain(NULL,NULL) );
# endif
}
void ICCfltkBetrachter::cb_menueintrag_lang(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_lang_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_3D_i(Fl_Menu_*, void*) {
  DBG_PROG_START
  icc_examin->zeig3D();
  DBG_PROG_ENDE;
}
void ICCfltkBetrachter::cb_menueintrag_3D(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_3D_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_inspekt_i(Fl_Menu_*, void*) {
  icc_examin->zeigPrueftabelle();
}
void ICCfltkBetrachter::cb_menueintrag_inspekt(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_inspekt_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_zeigcgats_i(Fl_Menu_* o, void*) {
  #ifdef DEBUG
  Fl_Menu_* mw = (Fl_Menu_*)o;
  const Fl_Menu_Item* m = mw->mvalue();

  DBG_PROG_S (m->value())
#endif

  icc_examin->zeigCGATS();
}
void ICCfltkBetrachter::cb_menueintrag_zeigcgats(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_zeigcgats_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_vcgt_i(Fl_Menu_*, void*) {
  icc_examin->vcgtStoppen();
vcgt->show();
icc_examin->vcgtZeigen();
}
void ICCfltkBetrachter::cb_menueintrag_vcgt(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_vcgt_i(o,v);
}

void ICCfltkBetrachter::cb_menueintrag_testkurven_i(Fl_Menu_*, void*) {
  vcgt->show();
icc_examin->testZeigen();
}
void ICCfltkBetrachter::cb_menueintrag_testkurven(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_menueintrag_testkurven_i(o,v);
}

void ICCfltkBetrachter::cb_Log1_i(Fl_Menu_*, void*) {
  log_show();
DBG_NUM_S("Show Log window");
}
void ICCfltkBetrachter::cb_Log1(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_Log1_i(o,v);
}

void ICCfltkBetrachter::cb_About_i(Fl_Menu_*, void*) {
  ueber->hotspot(ueber_html);
  ueber->show();
  initHilfe();

  /* set visible */
  Fl_Tabs *tb = dynamic_cast<Fl_Tabs*>(hilfe_html->parent());
  if(tb)
    tb->value(icc_examin->icc_betrachter->ueber_html);
}
void ICCfltkBetrachter::cb_About(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_About_i(o,v);
}

void ICCfltkBetrachter::cb_Help_i(Fl_Menu_*, void*) {
  ueber->hotspot(hilfe_html);
  ueber->show();
  initHilfe();

  /* set visible */
  Fl_Tabs *tb = dynamic_cast<Fl_Tabs*>(hilfe_html->parent());
  if(tb)
    tb->value(icc_examin->icc_betrachter->hilfe_html);
}
void ICCfltkBetrachter::cb_Help(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_Help_i(o,v);
}

void ICCfltkBetrachter::cb_License_i(Fl_Menu_*, void*) {
  ueber->hotspot(lizenz_html);
  ueber->show();
  initHilfe();

  /* set visible */
  Fl_Tabs *tb = dynamic_cast<Fl_Tabs*>(hilfe_html->parent());
  if(tb)
    tb->value(icc_examin->icc_betrachter->lizenz_html);
}
void ICCfltkBetrachter::cb_License(Fl_Menu_* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->user_data()))->cb_License_i(o,v);
}

Fl_Menu_Item ICCfltkBetrachter::menu_menueleiste[] = {
 {_("File"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Open"), 0x4006f,  (Fl_Callback*)ICCfltkBetrachter::cb_Open, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Save Report"), 0,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_html_speichern, 0, 129, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Save Gamut as Profile"), 0,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_gamut_speichern, 0, 1, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Save Gamut as VRML"), 0,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_gamut_vrml_speichern, 0, 129, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Quit"), 0x40071,  (Fl_Callback*)ICCfltkBetrachter::cb_Quit1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Gamut"), 0x40068,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_huelle, 0, 16, FL_NORMAL_LABEL, 0, 14, 0},
 {_("View"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Whole Screen on/off"), 0x40076,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_Voll, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Settings"), 0,  0, 0, 80, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Oyranos Settings"), 0,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_oyranos, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("LANG"), 0,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_lang, 0, 17, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Windows"), 0,  0, 0, 192, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Gamut"), 0x40068,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_3D, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Report View"), 0x40062,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_inspekt, 0, 1, FL_NORMAL_LABEL, 0, 14, 0},
 {_("CGATS View"), 0x40067,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_zeigcgats, 0, 129, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Videocard Gamma"), 0x40074,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_vcgt, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Test Curves"), 0x50074,  (Fl_Callback*)ICCfltkBetrachter::cb_menueintrag_testkurven, 0, 16, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Log"), 0x4006c,  (Fl_Callback*)ICCfltkBetrachter::cb_Log1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Help"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("About"), 0,  (Fl_Callback*)ICCfltkBetrachter::cb_About, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Help"), 0xffbe,  (Fl_Callback*)ICCfltkBetrachter::cb_Help, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("License"), 0,  (Fl_Callback*)ICCfltkBetrachter::cb_License, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_html_speichern = ICCfltkBetrachter::menu_menueleiste + 2;
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_gamut_speichern = ICCfltkBetrachter::menu_menueleiste + 3;
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_gamut_vrml_speichern = ICCfltkBetrachter::menu_menueleiste + 4;
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_huelle = ICCfltkBetrachter::menu_menueleiste + 7;
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_Voll = ICCfltkBetrachter::menu_menueleiste + 9;
Fl_Menu_Item* ICCfltkBetrachter::menu_einstellungen = ICCfltkBetrachter::menu_menueleiste + 11;
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_oyranos = ICCfltkBetrachter::menu_menueleiste + 12;
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_lang = ICCfltkBetrachter::menu_menueleiste + 13;
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_3D = ICCfltkBetrachter::menu_menueleiste + 16;
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_inspekt = ICCfltkBetrachter::menu_menueleiste + 17;
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_zeigcgats = ICCfltkBetrachter::menu_menueleiste + 18;
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_vcgt = ICCfltkBetrachter::menu_menueleiste + 19;
Fl_Menu_Item* ICCfltkBetrachter::menueintrag_testkurven = ICCfltkBetrachter::menu_menueleiste + 20;
Fl_Menu_Item* ICCfltkBetrachter::menu_hilfe = ICCfltkBetrachter::menu_menueleiste + 23;

void ICCfltkBetrachter::cb_tag_browser_i(TagBrowser* o, void*) {
  o->selectItem( o->value() );
}
void ICCfltkBetrachter::cb_tag_browser(TagBrowser* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_tag_browser_i(o,v);
}

void ICCfltkBetrachter::cb_table_choice_i(TableChoice* o, void*) {
  o->auswahlCb();
}
void ICCfltkBetrachter::cb_table_choice(TableChoice* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_table_choice_i(o,v);
}

void ICCfltkBetrachter::cb_table_text_i(TagTexts* o, void*) {
  o->selectItem( o->value() );
}
void ICCfltkBetrachter::cb_table_text(TagTexts* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_table_text_i(o,v);
}

void ICCfltkBetrachter::cb_table_gl_alltables_button_i(Fl_Button*, void*) {
  icc_examin->showTables();
}
void ICCfltkBetrachter::cb_table_gl_alltables_button(Fl_Button* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_table_gl_alltables_button_i(o,v);
}

void ICCfltkBetrachter::cb_table_gl_slider_choice_i(Fl_Choice* o, void*) {
  ICClist<int> channels = table_gl->channels();
  table_gl_slider->value( channels[ 3 + o->value() ] );
}
void ICCfltkBetrachter::cb_table_gl_slider_choice(Fl_Choice* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_table_gl_slider_choice_i(o,v);
}

void ICCfltkBetrachter::cb_table_gl_slider_i(Fl_Value_Slider*, void*) {
  icc_examin->tableChannel( (int)table_gl_slider_choice->value()+3, (int)table_gl_slider->value() );
}
void ICCfltkBetrachter::cb_table_gl_slider(Fl_Value_Slider* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_table_gl_slider_i(o,v);
}

void ICCfltkBetrachter::cb_tag_text_i(TagTexts* o, void*) {
  o->selectItem( o->value() );
}
void ICCfltkBetrachter::cb_tag_text(TagTexts* o, void* v) {
  ((ICCfltkBetrachter*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_tag_text_i(o,v);
}

icc_examin_ns::MyFl_Double_Window* ICCfltkBetrachter::init(int argc, char** argv) {
  DBG_PROG_START
  fullscreen = false;
  setTitleUrl = true;
  table_gl_tables_buttons = 0;
  px=py=pw=ph=0;
  tag_nummer = -1;
  widget_oben = -1;
  { icc_examin_ns::MyFl_Double_Window* o = ueber = new icc_examin_ns::MyFl_Double_Window(365, 295, _("About ICC Examin"));
    ueber->box(FL_FLAT_BOX);
    ueber->color((Fl_Color)FL_BACKGROUND_COLOR);
    ueber->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
    ueber->labeltype(FL_NO_LABEL);
    ueber->labelfont(0);
    ueber->labelsize(14);
    ueber->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
    ueber->user_data((void*)(this));
    ueber->align(FL_ALIGN_TOP);
    ueber->when(FL_WHEN_RELEASE);
    { Fl_Group* o = new Fl_Group(0, 0, 375, 295);
      { Flmm_Tabs* o = new Flmm_Tabs(0, 0, 365, 260);
        o->box(FL_THIN_UP_BOX);
        o->color((Fl_Color)FL_BACKGROUND_COLOR);
        o->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        o->align(FL_ALIGN_TOP);
        o->when(FL_WHEN_RELEASE);
        { ueber_html = new Fl_Help_View(0, 25, 365, 235, _("About"));
          ueber_html->box(FL_THIN_UP_BOX);
          ueber_html->color((Fl_Color)FL_BACKGROUND_COLOR);
          ueber_html->selection_color((Fl_Color)FL_DARK1);
          ueber_html->hide();
        } // Fl_Help_View* ueber_html
        { hilfe_html = new Fl_Help_View(0, 25, 365, 235, _("Help"));
          hilfe_html->box(FL_THIN_UP_BOX);
          hilfe_html->color((Fl_Color)FL_BACKGROUND_COLOR);
          hilfe_html->selection_color((Fl_Color)FL_DARK1);
          hilfe_html->hide();
        } // Fl_Help_View* hilfe_html
        { lizenz_html = new Fl_Help_View(0, 25, 365, 235, _("License"));
          lizenz_html->box(FL_THIN_UP_BOX);
          lizenz_html->color((Fl_Color)FL_BACKGROUND_COLOR);
          lizenz_html->selection_color((Fl_Color)FL_DARK1);
          lizenz_html->hide();
          Fl_Group::current()->resizable(lizenz_html);
        } // Fl_Help_View* lizenz_html
        { dank_html = new Fl_Help_View(0, 25, 365, 235, _("Acknowlegement"));
          dank_html->box(FL_THIN_UP_BOX);
          dank_html->color((Fl_Color)FL_BACKGROUND_COLOR);
          dank_html->selection_color((Fl_Color)FL_DARK1);
          dank_html->hide();
        } // Fl_Help_View* dank_html
        { links_text = new Fl_Output(10, 35, 345, 215, _("Links"));
          links_text->type(12);
          links_text->box(FL_THIN_DOWN_BOX);
          links_text->color((Fl_Color)FL_BACKGROUND_COLOR);
          links_text->selection_color((Fl_Color)FL_DARK1);
          links_text->hide();
        } // Fl_Output* links_text
        { info_html = new Fl_Help_View(0, 25, 365, 235, _("Info"));
          info_html->box(FL_THIN_UP_BOX);
          info_html->color((Fl_Color)FL_BACKGROUND_COLOR);
          info_html->selection_color((Fl_Color)FL_DARK1);
        } // Fl_Help_View* info_html
        o->end();
        Fl_Group::current()->resizable(o);
      } // Flmm_Tabs* o
      { ja = new Fl_Button(130, 264, 110, 25, _("Yes"));
        ja->callback((Fl_Callback*)cb_ja);
      } // Fl_Button* ja
      o->end();
    } // Fl_Group* o
    o->hide();
    o->use_escape_hide = true;
    ueber->end();
    ueber->resizable(ueber);
  } // icc_examin_ns::MyFl_Double_Window* ueber
  { icc_examin_ns::MyFl_Double_Window* o = vcgt = new icc_examin_ns::MyFl_Double_Window(370, 405, _("Grafic Card Gamma Table"));
    vcgt->box(FL_FLAT_BOX);
    vcgt->color((Fl_Color)FL_BACKGROUND_COLOR);
    vcgt->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
    vcgt->labeltype(FL_NO_LABEL);
    vcgt->labelfont(0);
    vcgt->labelsize(14);
    vcgt->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
    vcgt->user_data((void*)(this));
    vcgt->align(FL_ALIGN_TOP);
    vcgt->when(FL_WHEN_RELEASE);
    { Fl_Group* o = new Fl_Group(0, 0, 370, 395);
      { TagDrawings* o = vcgt_viewer = new TagDrawings(0, 0, 370, 360);
        vcgt_viewer->box(FL_NO_BOX);
        vcgt_viewer->color((Fl_Color)FL_BACKGROUND_COLOR);
        vcgt_viewer->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        vcgt_viewer->labeltype(FL_NORMAL_LABEL);
        vcgt_viewer->labelfont(0);
        vcgt_viewer->labelsize(14);
        vcgt_viewer->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        vcgt_viewer->align(FL_ALIGN_CENTER);
        vcgt_viewer->when(FL_WHEN_RELEASE);
        Fl_Group::current()->resizable(vcgt_viewer);
        o->show();
      } // TagDrawings* vcgt_viewer
      { vcgt_set_button = new Fl_Button(10, 370, 85, 25, _("Set"));
        vcgt_set_button->tooltip(_("Set the current profile as monitor profile and upload vcgt tag to the video c\
ard"));
        vcgt_set_button->callback((Fl_Callback*)cb_vcgt_set_button);
        vcgt_set_button->window()->hotspot(vcgt_set_button);
      } // Fl_Button* vcgt_set_button
      { vcgt_reset_button = new Fl_Button(95, 370, 90, 25, _("Reset"));
        vcgt_reset_button->tooltip(_("reset to standard gamma"));
        vcgt_reset_button->callback((Fl_Callback*)cb_vcgt_reset_button);
        vcgt_reset_button->window()->hotspot(vcgt_reset_button);
      } // Fl_Button* vcgt_reset_button
      { vcgt_load_button = new Fl_Button(185, 370, 90, 25, _("Load"));
        vcgt_load_button->tooltip(_("Load the current monitor profile"));
        vcgt_load_button->callback((Fl_Callback*)cb_vcgt_load_button);
        vcgt_load_button->window()->hotspot(vcgt_load_button);
      } // Fl_Button* vcgt_load_button
      { vcgt_close_button = new Fl_Button(275, 370, 90, 25, _("Close"));
        vcgt_close_button->callback((Fl_Callback*)cb_vcgt_close_button);
      } // Fl_Button* vcgt_close_button
      o->end();
    } // Fl_Group* o
    o->hide();
    o->use_escape_hide = true;
    vcgt->end();
    vcgt->resizable(vcgt);
  } // icc_examin_ns::MyFl_Double_Window* vcgt
  { DD = new icc_examin_ns::MyFl_Double_Window(385, 520, _("Gamut"));
    DD->box(FL_NO_BOX);
    DD->color((Fl_Color)FL_BACKGROUND_COLOR);
    DD->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
    DD->labeltype(FL_NO_LABEL);
    DD->labelfont(0);
    DD->labelsize(14);
    DD->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
    DD->user_data((void*)(this));
    DD->align(FL_ALIGN_TOP);
    DD->when(FL_WHEN_RELEASE);
    { Fl_Group* o = new Fl_Group(0, 0, 385, 520);
      { DD_menueleiste = new Fl_Menu_Bar(0, 0, 385, 25);
        DD_menueleiste->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        DD_menueleiste->when(3);
        { Fl_Menu_Item* o = &menu_DD_menueleiste[8];
          if(icc_examin->gamutwarn()) o->set();
        }
        { Fl_Menu_Item* o = &menu_DD_menueleiste[13];
          if(icc_examin->nativeGamut()) o->set();
        }
        DD_menueleiste->menu(menu_DD_menueleiste);
      } // Fl_Menu_Bar* DD_menueleiste
      { Fl_Tile* o = new Fl_Tile(0, 25, 385, 495);
        { GL_Ansicht* o = DD_farbraum = new GL_Ansicht(0, 25, 385, 470);
          DD_farbraum->box(FL_THIN_DOWN_BOX);
          DD_farbraum->color((Fl_Color)FL_BACKGROUND_COLOR);
          DD_farbraum->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
          DD_farbraum->labeltype(FL_NORMAL_LABEL);
          DD_farbraum->labelfont(0);
          DD_farbraum->labelsize(14);
          DD_farbraum->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          DD_farbraum->align(FL_ALIGN_CENTER);
          DD_farbraum->when(FL_WHEN_RELEASE);
          Fl_Group::current()->resizable(DD_farbraum);
          o->hide();
          o->typ( 1 ); // wandert ins 1. Nebenfenster
        } // GL_Ansicht* DD_farbraum
        { DD_box_stat = new Fl_Box(0, 495, 385, 25);
          DD_box_stat->box(FL_FLAT_BOX);
          DD_box_stat->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
        } // Fl_Box* DD_box_stat
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Tile* o
      o->end();
    } // Fl_Group* o
    { My_Fl_Box* o = no_box2 = new My_Fl_Box(0, 0, 385, 520);
      no_box2->box(FL_NO_BOX);
      no_box2->color((Fl_Color)FL_BACKGROUND_COLOR);
      no_box2->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      no_box2->labeltype(FL_NORMAL_LABEL);
      no_box2->labelfont(0);
      no_box2->labelsize(14);
      no_box2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      no_box2->align(FL_ALIGN_CENTER);
      no_box2->when(FL_WHEN_RELEASE);
      o->box(FL_NO_BOX);
    } // My_Fl_Box* no_box2
    DD->end();
    DD->resizable(DD);
  } // icc_examin_ns::MyFl_Double_Window* DD
  { icc_examin_ns::MyFl_Double_Window* o = details = new icc_examin_ns::MyFl_Double_Window(385, 520, _("ICC Examin"));
    details->box(FL_NO_BOX);
    details->color((Fl_Color)FL_BACKGROUND_COLOR);
    details->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
    details->labeltype(FL_NO_LABEL);
    details->labelfont(0);
    details->labelsize(14);
    details->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
    details->user_data((void*)(this));
    details->align(FL_ALIGN_TOP);
    details->when(FL_WHEN_RELEASE);
    { Fl_Group* o = new Fl_Group(0, 0, 385, 520);
      { Fl_Box* o = new Fl_Box(0, 0, 385, 520, _("invisible box"));
        o->box(FL_FLAT_BOX);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      } // Fl_Box* o
      { menueleiste = new Fl_Menu_Bar(0, 0, 385, 25);
        menueleiste->align(FL_ALIGN_LEFT);
        menueleiste->when(3);
        { Fl_Menu_Item* o = &menu_menueleiste[19];
          o->hide();
        }
        menueleiste->menu(menu_menueleiste);
      } // Fl_Menu_Bar* menueleiste
      { Fl_Group* o = new Fl_Group(0, 25, 385, 470);
        o->align(FL_ALIGN_LEFT);
        { Fl_Group* o = new Fl_Group(0, 25, 385, 470);
          o->align(FL_ALIGN_LEFT);
          { Fl_Help_View* o = inspekt_html = new Fl_Help_View(0, 25, 385, 470);
            inspekt_html->box(FL_FLAT_BOX);
            inspekt_html->color((Fl_Color)FL_BACKGROUND_COLOR);
            inspekt_html->align(FL_ALIGN_LEFT);
            Fl_Group::current()->resizable(inspekt_html);
            o->hide();
          } // Fl_Help_View* inspekt_html
          o->end();
        } // Fl_Group* o
        { examin = new Fl_Tile(0, 25, 385, 470);
          examin->align(FL_ALIGN_LEFT);
          { tag_browser = new TagBrowser(0, 25, 385, 135);
            tag_browser->tooltip(_("Choose one profile tag"));
            tag_browser->box(FL_THIN_DOWN_BOX);
            tag_browser->color((Fl_Color)FL_BACKGROUND_COLOR);
            tag_browser->selection_color((Fl_Color)FL_SELECTION_COLOR);
            tag_browser->labeltype(FL_NORMAL_LABEL);
            tag_browser->labelfont(0);
            tag_browser->labelsize(14);
            tag_browser->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
            tag_browser->callback((Fl_Callback*)cb_tag_browser);
            tag_browser->align(FL_ALIGN_LEFT);
            tag_browser->when(FL_WHEN_RELEASE_ALWAYS);
          } // TagBrowser* tag_browser
          { ansichtsgruppe = new Fl_Group(0, 160, 385, 335);
            ansichtsgruppe->align(FL_ALIGN_LEFT);
            { Fl_Group* o = tabellengruppe = new Fl_Group(0, 160, 385, 335);
              tabellengruppe->align(FL_ALIGN_LEFT);
              { Fl_Pack* o = new Fl_Pack(0, 160, 385, 335);
                o->align(FL_ALIGN_LEFT);
                { TableChoice* o = table_choice = new TableChoice(0, 160, 385, 25, _("Chain selection"));
                table_choice->tooltip(_("Choose a attribute"));
                table_choice->box(FL_NO_BOX);
                table_choice->down_box(FL_BORDER_BOX);
                table_choice->color((Fl_Color)FL_BACKGROUND_COLOR);
                table_choice->selection_color((Fl_Color)FL_SELECTION_COLOR);
                table_choice->labeltype(FL_NORMAL_LABEL);
                table_choice->labelfont(0);
                table_choice->labelsize(14);
                table_choice->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                table_choice->callback((Fl_Callback*)cb_table_choice);
                table_choice->align(FL_ALIGN_LEFT);
                table_choice->when(FL_WHEN_RELEASE);
                o->show();
                } // TableChoice* table_choice
                { Fl_Group* o = new Fl_Group(0, 185, 385, 310);
                o->align(FL_ALIGN_LEFT);
                { TagDrawings* o = table_viewer = new TagDrawings(0, 185, 385, 310);
                table_viewer->box(FL_NO_BOX);
                table_viewer->color((Fl_Color)FL_BACKGROUND_COLOR);
                table_viewer->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
                table_viewer->labeltype(FL_NORMAL_LABEL);
                table_viewer->labelfont(0);
                table_viewer->labelsize(14);
                table_viewer->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                table_viewer->align(FL_ALIGN_LEFT);
                table_viewer->when(FL_WHEN_RELEASE);
                o->show();
                } // TagDrawings* table_viewer
                { TagTexts* o = table_text = new TagTexts(0, 185, 385, 310);
                table_text->box(FL_FLAT_BOX);
                table_text->color((Fl_Color)FL_BACKGROUND_COLOR);
                table_text->selection_color((Fl_Color)FL_SELECTION_COLOR);
                table_text->labeltype(FL_NORMAL_LABEL);
                table_text->labelfont(0);
                table_text->labelsize(14);
                table_text->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                table_text->callback((Fl_Callback*)cb_table_text);
                table_text->align(FL_ALIGN_LEFT);
                table_text->when(FL_WHEN_RELEASE_ALWAYS);
                o->show();
                } // TagTexts* table_text
                { table_gl_group = new Fl_Group(0, 185, 385, 310);
                table_gl_group->align(FL_ALIGN_LEFT);
                { Fl_Box* o = new Fl_Box(0, 185, 385, 310);
                o->box(FL_FLAT_BOX);
                o->align(FL_ALIGN_LEFT);
                } // Fl_Box* o
                { GL_Ansicht* o = table_gl = new GL_Ansicht(0, 185, 360, 310);
                table_gl->box(FL_NO_BOX);
                table_gl->color((Fl_Color)FL_BACKGROUND_COLOR);
                table_gl->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
                table_gl->labeltype(FL_NORMAL_LABEL);
                table_gl->labelfont(0);
                table_gl->labelsize(14);
                table_gl->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                table_gl->align(FL_ALIGN_LEFT);
                table_gl->when(FL_WHEN_RELEASE);
                Fl_Group::current()->resizable(table_gl);
                o->hide();
                o->typ( 2 ); // bleibt zumeist im Hauptfenster
                } // GL_Ansicht* table_gl
                { table_gl_button_pack = new Fl_Pack(360, 185, 25, 310);
                { Fl_Button* o = table_gl_alltables_button = new Fl_Button(360, 185, 25, 25, _("o"));
                table_gl_alltables_button->tooltip(_("Show all channels of this table a own window."));
                table_gl_alltables_button->callback((Fl_Callback*)cb_table_gl_alltables_button);
                o->show();
                } // Fl_Button* table_gl_alltables_button
                table_gl_button_pack->end();
                } // Fl_Pack* table_gl_button_pack
                { table_gl_slider_pack = new Fl_Pack(0, 185, 25, 310);
                { table_gl_slider_choice = new Fl_Choice(0, 185, 25, 25);
                table_gl_slider_choice->down_box(FL_BORDER_BOX);
                table_gl_slider_choice->callback((Fl_Callback*)cb_table_gl_slider_choice);
                } // Fl_Choice* table_gl_slider_choice
                { table_gl_slider = new Fl_Value_Slider(0, 210, 25, 285);
                table_gl_slider->callback((Fl_Callback*)cb_table_gl_slider);
                Fl_Group::current()->resizable(table_gl_slider);
                } // Fl_Value_Slider* table_gl_slider
                table_gl_slider_pack->end();
                } // Fl_Pack* table_gl_slider_pack
                table_gl_group->end();
                Fl_Group::current()->resizable(table_gl_group);
                } // Fl_Group* table_gl_group
                o->end();
                Fl_Group::current()->resizable(o);
                } // Fl_Group* o
                o->end();
                Fl_Group::current()->resizable(o);
              } // Fl_Pack* o
              o->show();
              tabellengruppe->end();
            } // Fl_Group* tabellengruppe
            { twoD_pack = new Fl_Pack(0, 160, 385, 335);
              twoD_pack->align(FL_ALIGN_LEFT);
              { Fl_Box* o = new Fl_Box(0, 160, 385, 5);
                o->box(FL_UP_BOX);
                o->align(FL_ALIGN_LEFT);
              } // Fl_Box* o
              { Fl_Group* o = new Fl_Group(0, 165, 385, 330);
                o->align(FL_ALIGN_LEFT);
                { TagTexts* o = tag_text = new TagTexts(0, 165, 385, 330);
                tag_text->box(FL_FLAT_BOX);
                tag_text->color((Fl_Color)FL_BACKGROUND_COLOR);
                tag_text->selection_color((Fl_Color)FL_SELECTION_COLOR);
                tag_text->labeltype(FL_NORMAL_LABEL);
                tag_text->labelfont(0);
                tag_text->labelsize(14);
                tag_text->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                tag_text->callback((Fl_Callback*)cb_tag_text);
                tag_text->align(FL_ALIGN_LEFT);
                tag_text->when(FL_WHEN_RELEASE_ALWAYS);
                o->show();
                } // TagTexts* tag_text
                { TagDrawings* o = tag_viewer = new TagDrawings(0, 165, 385, 330);
                tag_viewer->box(FL_NO_BOX);
                tag_viewer->color((Fl_Color)FL_BACKGROUND_COLOR);
                tag_viewer->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
                tag_viewer->labeltype(FL_NORMAL_LABEL);
                tag_viewer->labelfont(0);
                tag_viewer->labelsize(14);
                tag_viewer->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
                tag_viewer->align(FL_ALIGN_LEFT);
                tag_viewer->when(FL_WHEN_RELEASE);
                o->hide();
                } // TagDrawings* tag_viewer
                o->end();
                Fl_Group::current()->resizable(o);
              } // Fl_Group* o
              twoD_pack->end();
            } // Fl_Pack* twoD_pack
            ansichtsgruppe->end();
          } // Fl_Group* ansichtsgruppe
          examin->end();
          Fl_Group::current()->resizable(examin);
        } // Fl_Tile* examin
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 495, 385, 25);
        o->align(FL_ALIGN_LEFT);
        { box_stat = new Fl_Box(0, 495, 385, 25, _("..."));
          box_stat->box(FL_THIN_DOWN_BOX);
          box_stat->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        } // Fl_Box* box_stat
        { Fl_Progress* o = load_progress = new Fl_Progress(0, 495, 385, 25, _("Loading .."));
          load_progress->box(FL_THIN_UP_BOX);
          load_progress->color((Fl_Color)FL_BACKGROUND_COLOR);
          o->hide();
          o->minimum(0.0);
          o->maximum(1.0);
        } // Fl_Progress* load_progress
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { My_Fl_Box* o = no_box = new My_Fl_Box(0, 0, 385, 520);
      no_box->box(FL_NO_BOX);
      no_box->color((Fl_Color)FL_BACKGROUND_COLOR);
      no_box->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      no_box->labeltype(FL_NORMAL_LABEL);
      no_box->labelfont(0);
      no_box->labelsize(14);
      no_box->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      no_box->align(FL_ALIGN_LEFT);
      no_box->when(FL_WHEN_RELEASE);
      //o->box(FL_NO_BOX);
    } // My_Fl_Box* no_box
    o->main_win = o;
    details->end();
  } // icc_examin_ns::MyFl_Double_Window* details
  tag_text->inspekt_topline = 0;

  details->resizable(tag_text);
  //Fl::background(190,190,190);
  //Fl::background(255,255,255);
  //Fl::scheme(NULL);
  Fl_File_Icon::load_system_icons();
  Fl::get_system_colors();
  details->show();
  { // plastic sets a background image, for others unset a transparent box
    // the background is not redrawn for new text
    const char* style = Fl::scheme();
    if(!style || (style && strstr(style,"plastic") == 0))
      ;//box_stat->box(FL_BORDER_BOX);
  }
  DBG_PROG
  DBG_PROG_ENDE
  return details;
}

int ICCfltkBetrachter::run(int argc, char** argv) {
  DBG_PROG_START
  int ret = Fl::run();

  DBG_PROG_ENDE;
  return ret;
}

ICClist<std::string> ICCfltkBetrachter::open_veraltet(ICClist<std::string> dateinamen) {
  DBG_PROG_START
  #include "icc_vrml.h"

  //Fl_File_Icon	*icon;	// New file icon
  DBG_PROG

    const char* ptr = NULL;
    if (dateinamen.size()) {
      ptr = dateinamen[0].c_str();
      dateiwahl()->value(ptr);
      DBG_PROG_S( dateinamen[0])
    } 
      if(ptr) DBG_PROG_V( ptr );
    if (!ptr)
      ptr = getenv("PWD");

      if(ptr) DBG_PROG_V( ptr )
    if(( ptr &&
        (ptr[0] == '/') &&
        (strlen(ptr) == 1) ) ||
        !ptr )
    {
      ptr = getenv("HOME");
    }

    dateiwahl()->show();

    if(ptr)
      dateiwahl()->value(ptr);


    while (dateiwahl()->visible())
      Fl::wait();

    DBG_NUM_V( dateiwahl()->count() )
    if (dateiwahl()->count() && dateiwahl()->value()) {
      DBG_NUM_V( dateiwahl()->value() )
      dateinamen.resize(dateiwahl()->count());
      for (int i = 1; i <= dateiwahl()->count(); i++)
        dateinamen[i-1] = dateiwahl()->value(i);
    }
  DBG_PROG


  if (dateinamen.size() == 0) {
    DBG_PROG_ENDE
    return dateinamen;
  }

  DBG_PROG_ENDE
  return dateinamen;
}

void ICCfltkBetrachter::quit(void) {
  DBG_PROG_START
  /*Fl::remove_timeout((void (*)(void *))timeIT, (void *)viewer);
  delete viewer;
  delete browser;
  delete canvas;
  details->hide();*/
  icc_examin->quit();
  DBG_PROG_ENDE
}

void ICCfltkBetrachter::zeig_mich_(void* widget) {
  DBG_PROG_START
  // zeigt das ausgewaehlte Fenster (widget)

  table_viewer->hide();
  table_text->hide();
  tag_viewer->hide(); DBG_PROG
  tag_viewer->clear_visible(); DBG_PROG
  tag_text->hide();
  inspekt_html->hide();

  // stop
  if (widget != table_gl) {
    table_gl->hide();
  }
  if (widget != DD_farbraum ) {
    DD_farbraum->hide();
  }

  // start
  if( widget == inspekt_html )
  { DBG_PROG_S("inspekt_html handling")
    if( menueintrag_inspekt->value() )
      inspekt_html->show();
    else
      inspekt_html->hide();
  }

  if (widget != table_gl &&
      widget != DD_farbraum )
  { 
    ((Fl_Widget*)widget)->show(); DBG_PROG
    if( !menueintrag_inspekt->value() &&
        !menueintrag_3D->value() )
      ;//selectItem(icc_examin->tag_nr()+6);
  } else if (widget == table_gl) {
    DBG_PROG_S( "leave table GL window." )
    table_gl->show();
  } else if (widget == DD_farbraum) {
    DBG_PROG_S( "leave 3D GL window." )
    DD_farbraum->show();
  }
  DBG_PROG_ENDE
}

void ICCfltkBetrachter::measurement(bool has_measurement) {
  if (has_measurement) {
    DBG_PROG_S(menueintrag_inspekt->value())
    if (menueintrag_inspekt->value()) {
      bool export_ausserhalb = false;
      inspekt_html->value(profile.profil()->report( export_ausserhalb,
                                                    icc_examin->options() ).c_str());
      if (inspekt_html->size() -75 < tag_text->inspekt_topline)
        inspekt_html->topline (inspekt_html->size() - 75);
      else
        inspekt_html->topline (tag_text->inspekt_topline);
    }
    menueintrag_inspekt->activate();
    menueintrag_html_speichern->activate();
    menueintrag_zeigcgats->activate();
  } else {
    menueintrag_inspekt->deactivate();
    menueintrag_html_speichern->deactivate();
    menueintrag_zeigcgats->deactivate();
  }
}

void ICCfltkBetrachter::table_gl_boxAdd( const char ** names_short, const char** names, int n, int actual ) {
  DBG_PROG_START
  int i;
    int h = table_gl_alltables_button->h(),
        w = table_gl_alltables_button->w();
    Fl_Button * o;

    table_gl_group->begin();
    if(table_gl_tables_buttons)
      for(i = 1; i <= (intptr_t)table_gl_tables_buttons[0] + 1; ++i)
      {
        table_gl_tables_buttons[i]->hide();
        table_gl_button_pack->remove( table_gl_tables_buttons[i] );
        if(table_gl_tables_buttons[i])
          delete table_gl_tables_buttons[i];
      }

    table_gl_button_pack->begin();
    table_gl_button_pack->size( table_gl_button_pack->w(), table_gl_group->h() );

    table_gl_tables_buttons = new Fl_Button* [n+2];
    table_gl_tables_buttons[0] = (Fl_Button*)(intptr_t) n;

    for(i = 1; i <= (intptr_t)table_gl_tables_buttons[0]; ++i)
    {
      int kanal = i - 1;

      table_gl_tables_buttons[i] = o = 
        new Fl_Button( table_gl_alltables_button->x(),
                       table_gl_alltables_button->y() + i*h,
                       w,h );
      o->copy_label( names_short[ kanal ] );
      o->callback( (Fl_Callback*)table_gl_menueCb_ );
      o->user_data( (void*)(intptr_t)(GL_Ansicht::MENU_MAX + kanal) );
      o->tooltip( icc_strdup_m( names[ kanal ] ) );
      o->when(FL_WHEN_RELEASE);
      if(i-1 == actual)
        o->take_focus();
    }
    int oh = table_gl_button_pack->y() + table_gl_group->h() - (table_gl_tables_buttons[i-1]->y() + h);

    table_gl_tables_buttons[i] = o = new Fl_Button( table_gl_alltables_button->x(),
                       table_gl_alltables_button->y() + i*h,
                       w,oh );
    o->box(FL_NO_BOX);
    table_gl_button_pack->end();
    table_gl_button_pack->resizable(o);
  table_gl_group->end();
  
  DBG_PROG_ENDE
}

void ICCfltkBetrachter::table_gl_sliderAdd( const char** names_short, const char** names, ICClist<int> channels, int clutpoints ) {
  DBG_PROG_START
  int i;
    int w_new = table_gl_slider_pack->w();
    
    if(table_gl->x() == 0 && channels.size() > 3)
    {
      Fl_Menu_Item *menue = 0;
      if(channels.size() - 3 > 0)
        menue = (Fl_Menu_Item *)calloc( sizeof (Fl_Menu_Item),
                                        channels.size() - 3 + 1 );

      if(menue)
      {
        for(i = 0; i < (int)channels.size() - 3; ++i)
          menue[i].text = names_short[3+i];
        menue[i].text = 0;
      }
      
      table_gl_slider_choice->clear();
      table_gl_slider_choice->menu(menue);

      table_gl->resize(w_new,table_gl->y(), table_gl->w()-w_new, table_gl->h());
      table_gl_slider_pack->show();
      table_gl_slider->bounds( 0, clutpoints - 1 );
      table_gl_slider->step( 1, 1 );

      if(0 <= table_gl_slider_choice->value() &&
         table_gl_slider_choice->value() < (int)channels.size() - 3)
        table_gl_slider->value( channels[table_gl_slider_choice->value()+3] );

    } else if( table_gl->x() > 0 && channels.size() <= 3) {
      table_gl->resize(0,table_gl->y(), table_gl->w()+w_new, table_gl->h());
      table_gl_slider_pack->hide();
    }
  
  DBG_PROG_ENDE
}

void dHaendler(void* o) {
  DBG_PROG_START
  Fl::remove_timeout( (void(*)(void*))dHaendler, 0 );

  if (!Fl::has_timeout( (void(*)(void*))dHaendler, 0 )
   && ((TagDrawings*)o)->active()
   && ((TagDrawings*)o)->visible_r()
   && ((TagDrawings*)o)->wiederholen)
  {
    ((TagDrawings*)o)->ruhigNeuzeichnen();

    #ifdef DEBUG
    DBG_PROG_V( ((TagDrawings*)o)->wiederholen )
    #endif
  }
  DBG_PROG_ENDE
}

void initHilfe() {
  /* aktualisieren */
  icc_examin->icc_betrachter->ueber_html->value(getUeberHtml().c_str());
  icc_examin->icc_betrachter->hilfe_html->value(getHilfeHtml().c_str());
  icc_examin->icc_betrachter->lizenz_html->value(getLizenzHtml().c_str());
  icc_examin->icc_betrachter->dank_html->value(getDankHtml().c_str());
  icc_examin->icc_betrachter->links_text->value(getLinksText().c_str());
  icc_examin->icc_betrachter->info_html->value(getInfoHtml().c_str());
}
