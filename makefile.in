DEBTARGET = icc-examin

COLLECT = ar cru
RANLIB = ranlib
LINK = ln -s

SRCDIR          = $(src_dir)
BUILDDIR        = $(build_dir)/

DL = --ldflags # --ldstaticflags

X_CPPFILES = icc_helfer_x.cpp
OSX_CPPFILES = icc_helfer_osx.cpp
FLTK_CPPFILES = icc_helfer_fltk.cpp
I18N_CXXFILES = #fl_i18n.cxx fl_i18n_fl.cxx
I18N_HEADERS = #fl_i18n.H
FLMM_H = -I$(SRCDIR)/Flmm
MSGFMT = msgfmt -c --statistics
RPMARCH = `rpmbuild --showrc | awk '/^build arch/ {print $$4}'`

LIB_LIBS = -L$(libdir) -L./ $(FLTK_LIBS) $(FLU_LIBS) \
	-L/lib \
	$(DBG_LIBS) -lintl $(dl) $(m) $(c)


LIBSONAMEFULL = lib$(TARGET)$(LIBMID).$(VERSION_A).$(VERSION_B).$(VERSION_C)$(LIBEXT)
LIBSONAME = lib$(TARGET)$(LIBMID).$(VERSION_A)$(LIBEXT)
LIBSO = lib$(TARGET)$(LIBMID)$(LIBEXT)
LIBFL_I18N = fl_i18n/libfl_i18n.a
LIBBSP = bsp/libbsp.a
LIBOYRANOS_EXTRA =

TOOLKIT_FILES = $(FLTK_CPPFILES)


INCL_ = $(X_H) $(OSX_H) $(OYRANOS_H) \
	$(FLTK_H) $(FTGL_H) $(FONTCONFIG_H) \
	-I$(SRCDIR) $(FLMM_H) $(GLU_H) $(XCM_H) \
	-I$(includedir) 
INCL_DEP = $(ALL_SOURCEFILES) $(BSP_SOURCES)
CFLAGS_ = $(CFLAGS) $(DEBUG)
CXXFLAGS_ = $(CXXFLAGS) $(INCL_) $(DEBUG)

LDLIBS = $(LDFLAGS) -L$(libdir) -L./ $(LIBFL_I18N) $(Flmm_OBJECTS) \
	$(FLTK_LIBS) $(X11_LIBS) -L/lib \
	$(LIBOYRANOS_EXTRA) $(OYRANOS_LIBS) \
	$(FTGL_LIBS) $(FONTCONFIG_LIBS) $(I18N_LIB) $(DBG_LIBS) \
	$(LIBNAME) $(LIBBSP) $(CWLIB) \
	$(GLU_LIBS) $(pthread)

CPP_HEADERS = \
	agviewer.h \
	icc_betrachter.h \
	cccie64.h \
	ciexyz64_1.h \
	flstring.h \
	icc_cgats_filter.h \
	icc_dateiwahl.h \
	icc_draw.h \
	icc_draw_fltk.h \
	icc_fenster.h \
	icc_formeln.h \
	icc_examin.h \
	icc_examin_io.h \
	icc_gamut.h \
	icc_gl.h \
	icc_helfer.h \
	icc_helfer_fltk.h \
	icc_helfer_time.h \
	icc_helfer_ui.h \
	icc_helfer_x.h \
	icc_info.h \
	icc_icc.h \
	icc_kette.h \
	icc_list.h \
	icc_measurement.h \
	icc_model_observer.h \
	icc_oyranos.h \
	icc_oyranos_extern.h \
	icc_profile.h \
	icc_profile_header.h \
	icc_profile_tags.h \
	icc_speicher.h \
	icc_threads.h \
	icc_thread_daten.h \
	icc_ueber.h \
	icc_utils.h \
	icc_vrml.h \
	icc_vrml_parser.h \
	icc_waehler.h \
	my_file_chooser.h \
	Oy_Fl_Double_Window.h \
	Oy_Fl_Group.h \
	Oy_Fl_Window_Base.h \
	oyranos_display_helpers.h \
	oyranos_display_helpers.c \
	threads.h
#	Fl_Slot.H

COMMON_CPPFILES = \
	agviewer.cpp \
	icc_cgats_filter.cpp \
	icc_draw.cpp \
	icc_examin.cpp \
	icc_examin_farbraum.cpp \
	icc_examin_io.cpp \
	icc_examin_tagwahl.cpp \
	icc_fenster.cpp \
	icc_formeln.cpp \
	icc_gamut.cpp \
	icc_gl.cpp \
	icc_helfer.cpp \
	icc_info.cpp \
	icc_kette.cpp \
	icc_measurement.cpp \
	icc_model_observer.cpp \
	icc_oyranos.cpp \
	icc_profile.cpp \
	icc_profile_header.cpp \
	icc_profile_tags.cpp \
	icc_schnell.cpp \
	icc_speicher.cpp \
	icc_threads.cpp \
	icc_thread_daten.cpp \
	icc_ueber.cpp \
	icc_utils.cpp \
	icc_vrml.cpp \
	icc_vrml_parser.cpp \
	threads.cpp

DEBUG_CC = debug.cc
DEBUG_H  = sys.h debug.h

MAIN_SOURCES = icc_main.cpp
CINEPAINT_SOURCES = icc_cinepaint.cpp
FLMM_CXXFILES = \
	Flmm/Flmm.cxx \
	Flmm/Flmm_Message.cxx \
	Flmm/Flmm_Tabs.cxx

COMMON_CFILES =  \
	icc_oyranos_extern.c \
	flstring.c \
	vsnprintf.c
CFILES = \
	$(COMMON_CFILES)
CPPFILES = \
	$(COMMON_CPPFILES) \
	$(TOOLKIT_FILES) \
	$(X_CPP) \
	$(OSX_CPP)
CXXFILES = \
	icc_betrachter.cxx \
	my_file_chooser.cxx \
	my_file_chooser2.cxx \
	my_fl_double_window.cxx
TEST_CPP = \
	tests/dE2000_test.cpp \
	tests/intptr_test.c \
	tests/fltk_test.cxx \
	tests/tiff_test.cxx \
	tests/gettext_test.cxx \
	tests/lib_test.cxx
TEST_H = \
	tests/ciede2000testdata.h
TEST_FILES = $(TEST_CPP) $(TEST_H)

EXTRA_CPPFILES = icc_cinepaint_intern.cpp

ALL_SOURCEFILES = \
	$(COMMON_CFILES) \
	$(COMMON_CPPFILES) \
	$(OSX_CPPFILES) \
	$(X_CPPFILES) \
	$(FLTK_CPPFILES) \
	$(FLMM_CXXFILES) \
	$(I18N_CXXFILES) \
	$(CXXFILES) \
	$(MAIN_SOURCES) \
	$(CINEPAINT_SOURCES) \
	$(EXTRA_CPPFILES)

ALL_HEADERFILES = \
	$(CPP_HEADERS) \
	$(I18N_HEADERS)

DOKU = \
	TODO \
	README \
	ChangeLog \
	COPYING \
	BUGS \
	AUTHORS \
	INSTALL \
	iccexamin.desktop \
	iccexamin.png \
	iccexamin.svg \
	iccexamin.xpm

MAN1 = iccexamin.1

FLMM_FILES = \
	Flmm/Flmm.H \
	Flmm/Flmm_Message.H \
	Flmm/Flmm_Tabs.H \
	Flmm/AUTHORS \
	Flmm/ANNOUNCEMENT \
	Flmm/CHANGES \
	Flmm/COPYING \
	Flmm/CREDITS \
	Flmm/README

# the files are covered in the bsp directory
BSP_SOURCES := $(shell cd $(SRCDIR) && ls bsp/*.c)

FLUID = \
	icc_betrachter.fl \
	my_file_chooser.fl
FONT = FreeSans.ttf

SOURCES = $(ALL_SOURCEFILES) $(ALL_HEADERFILES)

# we need these files to generate explicite targets for out of tree builds
COBJECTS = \
	$(CFILES:.c=.o) \
	$(BSP_OBJECTS)
CPPOBJECTS = $(MAIN_OBJECTS) $(CPPFILES:.cpp=.o)
CXXOBJECTS = $(CXXFILES:.cxx=.o) $(Flmm_OBJECTS) $(I18N_OBJECTS)


OBJECTS = $(CFILES:.c=.o) $(CPPFILES:.cpp=.o) $(CXXFILES:.cxx=.o)
MAIN_OBJECTS = $(MAIN_SOURCES:.cpp=.o)
CINEPAINT_OBJECTS = $(CINEPAINT_SOURCES:.cpp=.o)
Flmm_OBJECTS = $(FLMM_CXXFILES:.cxx=.o)
I18N_OBJECTS =  $(I18N_CXXFILES:.cxx=.o)
BSP_OBJECTS = $(BSP_SOURCES:.c=.o)

LINGUAS_SRC = $(LING:.po=.gmo)
ALL_OBJECTS = $(OBJECTS) $(MAIN_OBJECTS) $(CINEPAINT_OBJECTS) $(I18N_OBJECTS) \
	$(LINGUAS_SRC) $(Flmm_OBJECTS)

POT_FILE = po/$(TARGET).pot

APPL_FILES = \
	ICC\ Examin.app/ \
	ICC\ Examin.sh.in \
	Info.plist

CWDBUG_FILES = $(DEBUG_CC) $(DEBUG_H)

BSP_FILES = $(BSP_C) $(BSP_H) $(BSP_TEXT)

CONFIG_FILES = \
	$(SRCDIR)/makefile.in \
	$(SRCDIR)/configure \
	$(SRCDIR)/configure_tests.sh \
	$(SRCDIR)/$(DEBTARGET).spec.in

ALL_FILES = \
	$(CONFIG_FILES) \
	$(SOURCES) \
	$(DOKU) \
	$(MAN1) \
	$(FONT) \
	$(APPL_FILES) \
	$(CWDBUG_FILES) \
	$(FLUID)


# get time stamp
MTIME   := $(shell date +%y%m%d.%H%M%S)


all:	config.h mkdepend dynamic
	
BASE = 
	
release:	icc_alles.o
	echo Linking $@...
	$(CXX) $(CXXFLAGS_) -o $(BINTARGET) \
	icc_alles.o \
	$(LDLIBS)
	$(REZ)
	$(RM) icc_alles.o

dynamic:	$(BINTARGET) $(CINEPAINT)

$(BINTARGET):	$(BASE) $(OBJECTS) $(MAIN_OBJECTS) $(LINGUAS_SRC) $(I18N_OBJECTS) $(LIBNAME) $(Flmm_OBJECTS) $(LIBFL_I18N) $(LIBBSP)
	echo Linking $@ ...
	$(CXX) $(CXXFLAGS_) -o $@ \
	$(MAIN_OBJECTS) $(OBJECTS) \
	$(LDLIBS) $(LINK_LIB_PATH) $(LINK_SRC_PATH)
	$(REZ)

$(CINEPAINT_OBJECTS):	$(SRCDIR)/$(CINEPAINT_SOURCES)
	echo Compiling Gtk CinePaint plug-in ...
	$(CXX) -I. $(CXXFLAGS_) `$(CP_FLAGS)` -c $(SRCDIR)/$(CINEPAINT_SOURCES)

$(CINEPAINT):	$(BASE) $(CINEPAINT_OBJECTS) $(OBJECTS) $(LINGUAS_SRC) $(I18N_OBJECTS) $(LIBNAME) $(Flmm_OBJECTS) $(LIBFL_I18N) $(LIBBSP)
	echo Linking $@ ...
	$(CXX) $(CXXFLAGS_) `$(CP_FLAGS)` -o $@ \
	$(CINEPAINT_OBJECTS) $(OBJECTS) \
	`$(CP_LIBS)` $(LDLIBS) $(LINK_LIB_PATH) $(LINK_SRC_PATH)
	$(REZ)


$(LIBSONAMEFULL):	$(I18N_OBJECTS)
	echo Linking $@ ...
	$(CXX) $(CFLAGS_) $(LDFLAGS) $(LINK_NAME) -o $(LIBSONAMEFULL) \
	$(I18N_OBJECTS)  icc_utils.o icc_helfer.o icc_speicher.o
	$(REZ)
	$(RM)  $(LIBSONAME)
	$(LINK) $(LIBSONAMEFULL) $(LIBSONAME)
	$(RM)  $(LIBSO)
	$(LINK) $(LIBSONAMEFULL) $(LIBSO)

$(LIBNAME):	$(I18N_OBJECTS)
	echo Linking $@ ...
	$(COLLECT) $(LIBNAME) $(I18N_OBJECTS)
	$(RANLIB) $(LIBNAME)

$(LIBFL_I18N):
	cd fl_i18n/ && $(MAKE) -f $(MAKEFILE_ARCH)

$(LIBBSP):	$(BSP_OBJECTS)
	cd bsp/ && $(MAKE)

static:	$(BINTARGET)
	echo Linking $@ ...
	$(CXX) $(CXXFLAGS_) -o $(BINTARGET) $(MAIN_OBJECTS) $(OBJECTS) \
	-L./ \
	`test -f /opt/local/lib/libfltk_images.a && (echo /opt/local/lib/libfltk_images.a; \
	    (test -f /opt/local/lib/libpng.a && echo /opt/local/lib/libpng.a || echo "-lpng"); (test -f /opt/local/lib/libjpeg.a && echo /opt/local/lib/libjpeg.a || echo "-ljpeg"); echo -lz) || \
	$(fltkconfig) --use-gl --use-images --ldstaticflags` \
	`$(fltkconfig) --use-gl --ldstaticflags` \
	-L/opt/local/lib \
	`oyranos-config --ld_x_staticflags` -L/$(libdir) \
	-lftgl $(LIBBSP) \
	`test -f /usr/X11R6/lib/libfreetype.a \
	  && echo /usr/X11R6/lib/libfreetype.a || (test -f /usr/lib/libfreetype.a \
	    && echo /usr/lib/libfreetype.a || echo -lfreetype)` \
	$(I18N_LIBSTAT) $(X11_LIBS) \
	$(DBG_LIBS) \
	$(REZ)

strip: $(BINTARGET)
	echo strip $(BINTARGET)
	strip $(BINTARGET)

static_static:	$(OBJECTS)
	_$(CXX) $(CXXFLAGS_) -o $(BINTARGET) \
	$(OBJECTS) \
	$(LDLIBS) -static -ljpeg -lpng -lX11 -lpthread -lz -ldl \
	-lfreetype -lfontconfig -lXrender -lGLU -lXext -lexpat \
	-L/opt/local/lib
	$(REZ)

test:	icc_formeln.o icc_utils.o
	$(CXX) $(CXXFLAGS_) $(INCL) -o dE2000_test.o \
	  -c $(SRCDIR)/tests/dE2000_test.cpp
	$(CXX) $(CXXFLAGS_) -o dE2000_test dE2000_test.o icc_formeln.o \
	-L$(libdir)
	$(REZ)

$(LINGUAS_SRC):	$(SRCDIR)/$(POT_FILE)
	echo Linguas ... $(@:.gmo=)
	mkdir -p po/
	for ling in $(@:.gmo=); do \
	  lingua=`echo $${ling} | sed s%po/%%g | sed s%$(SRCDIR)/%%g`; \
	  echo "update po/$${lingua}.gmo ..."; \
	  test -f $(SRCDIR)/$${ling}.po \
        && ($(MSGFMT) -o po/$${lingua}.gmo $(SRCDIR)/$${ling}.po; \
            if [ ! -d po/$${lingua} ]; then \
              mkdir po/$${lingua}; \
            fi; \
            if [ ! -d po/$${lingua}/LC_MESSAGES ]; then \
              mkdir po/$${lingua}/LC_MESSAGES; \
            fi; \
            test -L po/$${lingua}/LC_MESSAGES/$(TARGET).mo \
              && $(RM) po/$${lingua}/LC_MESSAGES/$(TARGET).mo \
              || echo po/$${lingua}/LC_MESSAGES/$(TARGET).mo nicht gefunden; \
            ln -s ../../$${lingua}.gmo po/$${lingua}/LC_MESSAGES/$(TARGET).mo;) \
        || (echo $(SRCDIR)/$${ling}.po is not yet ready ... skipping) \
	done;

$(SRCDIR)/$(POT_FILE):
	echo Generating $(SRCDIR)/$(POT_FILE) ...
	mkdir -p $(SRCDIR)/po
	test `which xgettext` && (cd $(SRCDIR); \
	  xgettext --force-po $(XGETTEXT_OPTIONS) \
	   -d $(TARGET) \
	   -o $(SRCDIR)/$(POT_FILE) -c \
	   $(SOURCES) $(CHEADERS) $(BUILDDIR)icc_examin_version.h) \
	|| echo -e "\c"
	-$(MSGCAT) $(SRCDIR)/po/*.pot -o $(SRCDIR)/po/oyranos.pot
	for ling in $(SRCDIR)/po/*.po; do \
	  lingua=`echo $${ling} | sed 's%$(SRCDIR)/po/%%g ; s%.po%%'`; \
	  test `which $(MSGMERGE)` && \
	         $(MSGMERGE) $(MSGMERG_OPTS) $(SRCDIR)/po/$${lingua}.po \
	         $(SRCDIR)/$(POT_FILE) || \
	    echo -e "\c"; \
	done;
	echo ... $(SRCDIR)/$(POT_FILE) done


clean:	unbundle unpkg
	echo Cleaning $@ ...
	-$(RM) $(ALL_OBJECTS) $(BINTARGET) $(CINEPAINT) \
	$(LIBNAME) $(LIBSO) $(LIBSONAME) $(LIBSONAMEFULL)
	-for ling in $(LINGUAS); do \
	  test -f po/$${ling}.gmo \
        && $(RM) po/$${ling}.gmo; \
	done;
	cd fl_i18n/ && $(MAKE) -f $(MAKEFILE_ARCH) clean
	cd bsp/ && $(MAKE) clean
	echo ... $@ done

config:
	./configure

# configure if the file config is not available
config.h:	$(CONFIG_FILES) ./config.log
	./config.log

depend:	cdepend
	echo "Check for Dependencies ..."
	echo "MAKEDEPEND_ISUP = 1" > mkdepend
	echo "#nicht editieren/dont edit - automatisch generiert" >> mkdepend
	-(for file in $(INCL_DEP); do \
	    incl_src="$${incl_src} $(SRCDIR)/$${file}"; done; \
	  $(MAKEDEPEND) -I./ -I$(SRCDIR) $(INCL_) $${incl_src} >> mkdepend)

cdepend:
	echo preparing dependency compilation ...
	echo "COBJECTS_ISUP = 1" > cobjects
	echo "#nicht editieren/dont edit - automatisch generiert" >> cobjects
	echo "" >> cobjects
	for i in $(COBJECTS); do \
	  echo "$${i}:" >> cobjects; \
	  echo "	echo Compiling $${i} ..." >> cobjects; \
	  echo '	$$(CC) -I./ -I$$(SRCDIR) $$(CFLAGS_) -c -o $$*.o $$(SRCDIR)/$$*.c' >> cobjects; \
	  echo "" >> cobjects; \
	done
	for i in $(CPPOBJECTS); do \
	  echo "$${i}:" >> cobjects; \
	  echo "	echo Compiling $${i} ..." >> cobjects; \
	  echo '	$$(CXX) -I./ -I$$(SRCDIR) $$(CXXFLAGS_) -c -o $$*.o $$(SRCDIR)/$$*.cpp' >> cobjects; \
	  echo "" >> cobjects; \
	done
	for i in $(CXXOBJECTS); do \
	  echo "$${i}:" >> cobjects; \
	  echo "	echo Compiling $${i} ..." >> cobjects; \
	  echo '	$$(CXX) -I./ -I$$(SRCDIR) $$(CXXFLAGS_) $$(GETTEXT) -c -o $$*.o $$(SRCDIR)/$$*.cxx' >> cobjects; \
	  echo "" >> cobjects; \
	done

# The extension to use for executables...
EXEEXT		= 

# Build commands and filename extensions...
.SUFFIXES:	.0 .1 .3 .c .cxx .h .fl .man .o .z $(EXEEXT)

.c.o:
	echo Compiling $< ...
	$(CC) -I. $(CFLAGS_) -c $<

.cxx.o:
	echo Compiling $< ...
	$(CXX) -I. $(CXXFLAGS_) -c $<

.cpp.o:
	echo Compiling $< ...
	$(CXX) -I. $(CXXFLAGS_) -c $<

.fl.cxx:
	echo Expanding $< ...
	cd $(SRCDIR); fluid -c $<

.fl.h:
	echo Expanding $< ...
	cd $(SRCDIR); fluid -c $<

.po:
	echo Generating $@ ...
	msgfmt $<

tgz:
	$(MAKE) DESTDIR="`pwd`/Entwickeln" copy_files
	tar cf - Entwickeln/ \
	| gzip > $(DEBTARGET)_$(MTIME).tgz
	test -d Entwickeln && \
	test `pwd` != `(cd Entwickeln; pwd)` && \
	$(RM) -R Entwickeln
	test -d ../Archiv && mv -v $(DEBTARGET)_*.tgz ../Archiv

targz:
	test -d $(DEBTARGET)-$(VERSION) && $(RM) -R $(DEBTARGET)-$(VERSION) || echo -e "\c"
	$(MAKE) DESTDIR="`pwd`/$(DEBTARGET)-$(VERSION)" copy_files
	tar cf - $(DEBTARGET)-$(VERSION)/ \
	| gzip > $(DEBTARGET)_$(MTIME).tgz
	test -d $(DEBTARGET)-$(VERSION) && \
	test `pwd` != `(cd $(DEBTARGET)-$(VERSION); pwd)` && \
	$(RM) -R $(DEBTARGET)-$(VERSION) 
	test -d ../Archiv && mv -v $(DEBTARGET)_*.tgz ../Archiv || echo no copy

# ein automake Ziel
distdir:
	cd . && $(MAKE) DESTDIR=$(distdir) copy_files
	# tar acepts only 99 chars for filenames
	$(RM) -R $(distdir)/ICC\ Examin.app/
	mkdir -p $(distdir)/ICC\ Examin.app/

copy_files:
	mkdir -p $(DESTDIR)
	cd fl_i18n && \
	  $(MAKE) DESTDIR=$(DESTDIR)/fl_i18n -f $(MAKEFILE_ARCH) copy_files
	cd bsp && \
	  $(MAKE) DESTDIR=$(DESTDIR)/bsp copy_files
	mkdir -p $(DESTDIR)/Flmm
	cd $(SRCDIR) && \
	  $(COPY) -R $(FLMM_CXXFILES) $(FLMM_FILES) $(DESTDIR)/Flmm
	cd $(SRCDIR) && \
	$(COPY) -R \
	$(ALL_FILES) \
	$(DESTDIR)
	mkdir -p $(DESTDIR)/po
	cd $(SRCDIR) && \
	  $(COPY) $(POT_FILE) $(DESTDIR)/po
	mkdir -p $(DESTDIR)/tests
	cd $(SRCDIR) && \
	  $(COPY) $(TEST_FILES) $(DESTDIR)/tests
	for ling in $(LINGUAS); do \
	  test -f $(SRCDIR)/po/$${ling}.po \
	  && $(COPY) $(SRCDIR)/po/$${ling}.po $(DESTDIR)/po/; \
	done;


dist:	$(BASE) targz
	test -f && $(COPY) ../Archiv/$(DEBTARGET)_$(MTIME).tgz $(DEBTARGET)-$(VERSION).tar.gz || $(COPY) $(DEBTARGET)_$(MTIME).tgz $(DEBTARGET)-$(VERSION).tar.gz
	tar xzf $(DEBTARGET)-$(VERSION).tar.gz
	tar cjf $(DEBTARGET)-$(VERSION).tar.bz2 $(DEBTARGET)-$(VERSION)/
	$(RM) -R $(DEBTARGET)-$(VERSION)

dist-gzip:	dist

$(DEBTARGET).spec:
	$(SRCDIR)/configure

rpm:	$(DEBTARGET).spec dist
	$(SRCDIR)/configure --prefix=/usr --rpm-only # generate the spec file
	mkdir -p rpmdir/BUILD \
	rpmdir/SPECS \
	rpmdir/SOURCES \
	rpmdir/SRPMS \
	rpmdir/RPMS/$(RPMARCH)
	cp -f $(DEBTARGET)-$(VERSION).tar.bz2 rpmdir/SOURCES
	rpmbuild --clean -ba $(build_dir)/$(DEBTARGET).spec --define "_topdir $$PWD/rpmdir"
	@echo "============================================================"
	@echo "Finished - the Packages are in rpmdir/RPMS and rpmdir/SRPMS!"

deb:	dist
	$(SRCDIR)/configure --prefix=/usr --rpm-only
	mkdir -p debian/deb/DEBIAN
	tar xvjf $(DEBTARGET)-$(VERSION).tar.bz2
	(cd $(DEBTARGET)-$(VERSION); \
	./configure --prefix=/usr; \
	$(MAKE) "DESTDIR=$(build_dir)/debian/deb/DEBIAN" install;)
	$(COPY) $(DEBTARGET)-$(VERSION)/$(TARGET)_control $(build_dir)/debian/deb/DEBIAN/control
	$(RM) -R $(DEBTARGET)-$(VERSION)
	dpkg -b $(build_dir)/debian/deb debian/$(DEBTARGET)_$(VERSION)-$(RELEASE)_$(deb_arch).deb
	$(RM) -R $(build_dir)/debian/deb
	echo ... $@ done

debsrc:	dist
	test -d $(DEBTARGET)-$(VERSION) && $(RM) -R $(DEBTARGET)-$(VERSION) || echo ""
	tar xvjf $(DEBTARGET)-$(VERSION).tar.bz2
	cp -R $(SRCDIR)/extras/debian $(DEBTARGET)-$(VERSION)
	tar cjf $(DEBTARGET)_$(VERSION).orig.tar.bz2 $(DEBTARGET)-$(VERSION)/
	dpkg-source -b $(DEBTARGET)-$(VERSION)
	echo ... $@ done

debian:	debsrc
	(cd $(DEBTARGET)-$(VERSION)/debian; debuild)
	echo ... $@ done

install:	all $(INSTALL_TARGET)

install_cp:
	echo Installation ...
	mkdir -p $(DESTDIR)$(CP_DIR)
	$(INSTALL) -m 755 $(CINEPAINT) $(DESTDIR)$(CP_DIR)
	#strip $(DESTDIR)$(bindir)/$(CINEPAINT)
	mkdir -p $(DESTDIR)$(datadir)/fonts/
	$(INSTALL) -m 644 $(SRCDIR)/$(FONT) $(DESTDIR)$(datadir)/fonts/$(FONT)
	$(fltkconfig) --post $(DESTDIR)$(CP_DIR)/$(CINEPAINT)
	mkdir -p $(DESTDIR)$(datadir)/fonts/
	echo ... Installation finished

install_cp_linguas:
	echo  Linguas ...
	for ling in $(LINGUAS); do \
	  echo "install po/$${ling}.gmo ..."; \
	  mkdir -p $(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES; \
	  test -f po/$${ling}.gmo \
		&& (mkdir -p $(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES; \
            $(INSTALL) -m 644 po/$${ling}.gmo $(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES/$(CINEPAINT).mo ) \
		|| (echo $${ling}.gmo is not yet ready ... skipping); \
	done;
	echo ... Linguas Installation finished

install_global:
	echo Installation ...
	mkdir -p $(DESTDIR)$(bindir)
	$(INSTALL) -m 755 $(BINTARGET) $(DESTDIR)$(bindir)
	#strip $(DESTDIR)$(bindir)/$(BINTARGET)
	$(fltkconfig) --post $(DESTDIR)$(bindir)/$(BINTARGET)
	mkdir -p $(DESTDIR)$(datadir)/fonts/
	$(INSTALL) -m 644 $(SRCDIR)/$(FONT) $(DESTDIR)$(datadir)/fonts/$(FONT)
	mkdir -p $(DESTDIR)$(desktopdir)
	$(INSTALL) -m 644 iccexamin.desktop $(DESTDIR)$(desktopdir)/
	-xdg-desktop-menu install --novendor iccexamin.desktop
	mkdir -p $(DESTDIR)$(datadir)/mime/packages/
	mkdir -p $(DESTDIR)$(pixmapdir)/hicolor/scalable/
	$(INSTALL) -m 644 iccexamin.png $(DESTDIR)$(pixmapdir)/
	$(INSTALL) -m 644 $(SRCDIR)/iccexamin.svg $(DESTDIR)$(pixmapdir)/hicolor/scalable/
	-xdg-icon-resource install --size 128 --novendor iccexamin.png
	echo  Linguas ...
	for ling in $(LINGUAS); do \
	  echo "Installing po/$${ling}.gmo ..."; \
	  mkdir -p $(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES; \
	  test -f po/$${ling}.gmo \
		&& (mkdir -p $(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES; \
            $(INSTALL) -m 644 po/$${ling}.gmo $(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES/$(TARGET).mo ) \
		|| (echo $${ling}.gmo is not yet ready ... skipping); \
	done;
	mkdir -p "$(DESTDIR)$(mandir)/man1"
	cd $(SRCDIR) && \
	  $(INSTALL) -m 644 $(MAN1) "$(DESTDIR)$(mandir)/man1"
	echo ... Installation finished

uninstall:
	echo Deinstall ...
	if [ "$(INSTALL_TARGET)" = "install_global" ]; then \
	  $(RM) $(DESTDIR)$(bindir)/$(BINTARGET); \
	else \
	  $(RM) $(DESTDIR)$(CP_DIR)/$(CINEPAINT); \
	fi
	$(RM) $(DESTDIR)$(desktopdir)/iccexamin.desktop
	$(RM) $(DESTDIR)$(pixmapdir)/iccexamin.png
	$(RM) $(DESTDIR)$(pixmapdir)/hicolor/scalable/iccexamin.svg
	$(RM) $(DESTDIR)$(datadir)/fonts/$(FONT)
	for ling in $(LINGUAS); do \
	  $(RM) $(DESTDIR)$(datadir)/locale/$${ling}/LC_MESSAGES/$(TARGET).mo; \
	done;
	for file in $(MAN1); do \
	  $(RM) "$(DESTDIR)$(mandir)/man1/$$file"; \
	done
	echo ... $@ done

bundle:	#static
	echo bundle ...
	test -d ICC\ Examin.app/Contents/Resources$(prefix)/lib/colour/modules/ || mkdir -p ICC\ Examin.app/ ICC\ Examin.app/Contents/ ICC\ Examin.app/Contents/MacOS/ ICC\ Examin.app/Contents/Resources$(prefix)/  ICC\ Examin.app/Contents/Resources$(prefix)/bin/ ICC\ Examin.app/Contents/Resources$(prefix)/lib/colour/modules/ ICC\ Examin.app/Contents/Resources$(prefix)/lib/oyranos/ ICC\ Examin.app/Contents/Resources$(prefix)/share/
	$(INSTALL) -m 644 Info.plist ICC\ Examin.app/Contents/Info.plist
	$(INSTALL) -m 755 ICC\ Examin.sh  ICC\ Examin.app/Contents/MacOS/ICC\ Examin
	test -f iccexamin.app/Contents/MacOS/iccexamin && \
	  $(INSTALL) -m 755 $(BINTARGET).app/Contents/MacOS/$(BINTARGET) ICC\ Examin.app/Contents/MacOS/ || \
	  $(INSTALL) -m 755 $(BINTARGET) ICC\ Examin.app/Contents/MacOS/
	#strip ICC\ Examin.app/Contents/MacOS/$(BINTARGET)
	echo  Bibliotheken ...
	for bib in jpeg png lcms ltdl dl intl iconv fltk freetype ftgl oyranos oyranos_core oyranos_object elektra Xcm; do \
	  echo "bundle lib$${bib}$(LIBEXT) ..."; \
      test -f $(libdir)/lib$${bib}$(LIBEXT) \
		&& ($(COPY) -R $(libdir)/lib$${bib}*$(LIBEXT) 'ICC Examin.app/Contents/Resources$(prefix)/lib/' ) \
		|| ( test -f /usr/X11R6/lib/lib$${bib}$(LIBEXT) \
		    && ($(COPY) -R /usr/X11R6/lib/lib$${bib}*$(LIBEXT) 'ICC Examin.app/Contents/Resources$(prefix)/lib/' ) \
	        || (echo lib$${bib}$(LIBEXT) not found ... skipping)); \
	done;
	-$(COPY) $(libdir)/oyranos/lib* ICC\ Examin.app/Contents/Resources$(prefix)/lib/oyranos/
	-$(COPY) $(libdir)/colour/modules/lib* ICC\ Examin.app/Contents/Resources$(prefix)/lib/colour/modules/
	-$(COPY) -R $(libdir)/elektra ICC\ Examin.app/Contents/Resources$(prefix)/lib/
	test -f ~/bin/iccgamut \
	  && $(INSTALL) -m 755 ~/bin/iccgamut ICC\ Examin.app/Contents/Resources$(prefix)/bin/ \
	  || test -f iccgamut && $(INSTALL) -m 755 iccgamut ICC\ Examin.app/Contents/Resources$(prefix)/bin/ \
	  || test -f $(bindir)/iccgamut && $(INSTALL) -m 755 $(bindir)/iccgamut ICC\ Examin.app/Contents/Resources$(prefix)/bin/ \
	    || echo iccgamut not found
	$(INSTALL) -m 644 $(FONT) ICC\ Examin.app/Contents/Resources$(prefix)/share/
	echo  Linguas ...
	for ling in $(LINGUAS); do \
	  echo "bundle po/$${ling}.gmo ..."; \
      test -f po/$${ling}.gmo \
		&& (mkdir -p ICC\ Examin.app/Contents/Resources$(prefix)/locale/$${ling}/LC_MESSAGES; \
            $(INSTALL) -m 644 po/$${ling}.gmo ICC\ Examin.app/Contents/Resources$(prefix)/locale/$${ling}/LC_MESSAGES/$(TARGET).mo ) \
		|| (echo $${ling}.gmo is not yet ready ... skipping); \
	done;
	test -f $(DESTDIR)$(datadir)/locale/de/LC_MESSAGES/oyranos.mo && \
	  $(COPY) $(DESTDIR)$(datadir)/locale/de/LC_MESSAGES/oyranos.mo ICC\ Examin.app/Contents/Resources$(prefix)/locale/de/LC_MESSAGES || echo no Oyranos DE i18n;
	mkdir -p ICC\ Examin.app/Contents/Resources$(prefix)/share/color/icc
	-$(COPY) -r `oyranos-config --syscolordir`/`oyranos-config --iccdirname`/* ICC\ Examin.app/Contents/Resources$(prefix)/share/color/icc/
	echo ... bundling finished

unbundle:
	echo cleaning $@ in $(DESTDIR) ...
	$(RM) $(DESTDIR)ICC\ Examin.app/Contents/MacOS/*
	$(RM) $(DESTDIR)ICC\ Examin.app/Contents/Resources$(prefix)/share/$(FONT)
	$(RM) -R $(DESTDIR)ICC\ Examin.app/Contents/Resources$(prefix)/bin/*
	$(RM) -R $(DESTDIR)ICC\ Examin.app/Contents/Resources$(prefix)/lib/*
	$(RM) -R $(DESTDIR)ICC\ Examin.app/Contents/Resources$(prefix)/locale
	echo ... $@ done

.PHONY: install pkg bundle uninstall unbundle unpkg

pkg:	bundle
	echo Prepare osX Package ...
	$(RM) -r installation/*
	$(MAKE) DESTDIR=`pwd`/installation install
	mkdir -p installation/Applications/
	$(COPY) -R ICC\ Examin.app installation/Applications/
	$(MAKE) DESTDIR=`pwd`/installation/Applications/ unbundle
	test -f ~/bin/iccgamut \
	  && $(INSTALL) -m 755 ~/bin/iccgamut installation$(bindir) \
	  || test -f iccgamut && $(INSTALL) -m 755 iccgamut installation$(bindir) \
	  || test -f /opt/local/bin/iccgamut && $(INSTALL) -m 755 /opt/local/bin/iccgamut installation$(bindir) \
	    || echo iccgamut nicht gefunden
	$(LINK) $(bindir)/$(BINTARGET) installation/Applications/ICC\ Examin.app/Contents/MacOS/ICC\ Examin
	open /Developer/Applications/Utilities/PackageMaker.app ICC\ Examin.pmsp
	echo sudo: chown -R root:admin `pwd`/installation  -- bitte nicht vergessen
	echo ... Package prepared

unpkg:
	echo Cleaning $@ ...
	$(RM) -R installation/
	echo ... $@ done

fltkconfig:
	echo $(fltkconfig)

# mkdepend
include mkdepend
include cobjects

#ifndef MAKEDEPEND_ISUP
mkdepend: depend
#endif
#ifndef COBJECTS_ISUP
cobjects: cdepend
#endif
