// generated by Fast Light User Interface Designer (fluid) version 1.0104

#include "icc_examin.h"
static char *statlabel;
 std::string filename_alt;
 bool setTitleUrl = true;
 using namespace std;
 int px,py,pw,ph;
 int fullscreen;
static openvrml::browser *browser = 0;
static ViewerFLTK  *viewer = 0;
#include "icc_draw.h"
ICCprofile profile;

Fl_Double_Window *details=(Fl_Double_Window *)0;

Fl_Menu_Bar *Fl_lookat_MenuBar=(Fl_Menu_Bar *)0;

static void cb_Offnen(Fl_Menu_*, void*) {
  open(true);
}

static void cb_Beenden(Fl_Menu_*, void*) {
  quit();
}

static void cb_Voll(Fl_Menu_*, void*) {
  Fl_Window *w = (Fl_Window *)details;

  if (!fullscreen) {
    px = w->x();
    py = w->y();
    pw = w->w();
    ph = w->h();

    w->fullscreen();
    fullscreen = true;
  };
}

static void cb_normal_ansicht(Fl_Menu_*, void*) {
  Fl_Window *w = (Fl_Window *)details;

    w->fullscreen_off(px,py,pw,ph);
    fullscreen = false;
}

Fl_Menu_Item menu_Fl_lookat_MenuBar[] = {
 {"Daten", 0,  0, 0, 64, 0, 0, 14, 56},
 {"Offnen", 0x4006f,  (Fl_Callback*)cb_Offnen, 0, 0, 0, 0, 14, 56},
 {"Beenden", 0x40071,  (Fl_Callback*)cb_Beenden, 0, 0, 0, 0, 14, 56},
 {0},
 {"Ansicht", 0,  0, 0, 64, 0, 0, 14, 56},
 {"Ganzer Bildschirm", 0,  (Fl_Callback*)cb_Voll, 0, 0, 0, 0, 14, 56},
 {"normales Fenster", 0,  (Fl_Callback*)cb_normal_ansicht, 0, 0, 0, 0, 14, 56},
 {0},
 {0}
};

TagBrowser *tag_browser=(TagBrowser *)0;

static void cb_tag_browser(TagBrowser* o, void*) {
  o->select_item( o->value() );
}

Fl_Group *ansichtsgruppe=(Fl_Group *)0;

TagDrawings *tag_viewer=(TagDrawings *)0;

vFLGLWidget *canvas=(vFLGLWidget *)0;

TagTexts *tag_texts=(TagTexts *)0;

Fl_Box *stat=(Fl_Box *)0;

Fl_Progress *load_progress=(Fl_Progress *)0;

int main(int argc, char **argv) {
  Fl_Double_Window* w;
  statlabel = (char*)calloc (sizeof (char), 1024);
  fullscreen = false;
  { Fl_Double_Window* o = details = new Fl_Double_Window(385, 520, "ICC Details");
    w = o;
    o->box(FL_NO_BOX);
    o->color((Fl_Color)53);
    { Fl_Group* o = new Fl_Group(0, 0, 385, 520);
      { Fl_Menu_Bar* o = Fl_lookat_MenuBar = new Fl_Menu_Bar(0, 0, 385, 25);
        o->color((Fl_Color)53);
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        o->when(3);
        o->menu(menu_Fl_lookat_MenuBar);
      }
      { Fl_Tile* o = new Fl_Tile(0, 25, 385, 470);
        { TagBrowser* o = tag_browser = new TagBrowser(0, 25, 385, 135, "Bitte w\344hlen Sie ein Profilmerkmal aus");
          o->box(FL_NO_BOX);
          o->color((Fl_Color)53);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(14);
          o->labelcolor(FL_BLACK);
          o->callback((Fl_Callback*)cb_tag_browser);
          o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
          o->when(FL_WHEN_RELEASE_ALWAYS);
          int lines = tag_browser->size();
          cout << lines << endl; DBG
        }
        { Fl_Group* o = ansichtsgruppe = new Fl_Group(0, 160, 385, 335);
          { TagDrawings* o = tag_viewer = new TagDrawings(0, 160, 385, 335);
            o->box(FL_NO_BOX);
            o->color(FL_BACKGROUND_COLOR);
            o->selection_color(FL_BACKGROUND_COLOR);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(FL_BLACK);
            o->align(FL_ALIGN_CENTER);
            o->when(FL_WHEN_RELEASE);
            o->hide();
          }
          { vFLGLWidget* o = canvas = new vFLGLWidget(0, 160, 385, 335, "OpenVRML");
            o->box(FL_NO_BOX);
            o->color(FL_BACKGROUND_COLOR);
            o->selection_color(FL_BACKGROUND_COLOR);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(FL_BLACK);
            o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
            o->when(FL_WHEN_RELEASE);
            o->hide();
            o->hide();
          }
          { TagTexts* o = tag_texts = new TagTexts(0, 160, 385, 335, "Der Text");
            o->box(FL_NO_BOX);
            o->color((Fl_Color)53);
            o->selection_color(FL_SELECTION_COLOR);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(FL_BLACK);
            o->align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE);
            o->when(FL_WHEN_RELEASE_ALWAYS);
          }
          o->end();
        }
        o->end();
        Fl_Group::current()->resizable(o);
      }
      { Fl_Group* o = new Fl_Group(0, 495, 385, 25);
        { Fl_Box* o = stat = new Fl_Box(0, 495, 385, 25, "No wrl file loaded.");
          o->box(FL_THIN_DOWN_BOX);
          o->color((Fl_Color)53);
          o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        }
        { Fl_Progress* o = load_progress = new Fl_Progress(0, 495, 385, 25, "Laden ..");
          o->color((Fl_Color)53);
          o->hide();
          o->maximum(1.0);
          o->minimum(0.0);
        }
        o->end();
      }
      o->end();
    }
    browser = new openvrml::browser(cout, cerr);
    DBG
    if (argc>1) {
      std::vector<std::string> url;
      std::vector<std::string> param;

      if (browser && argc>1) {
        url.push_back (argv[1]);
        browser->load_url(url, param);
        sprintf (statlabel, "%s geladen", argv[1]);
        stat->label(statlabel);
        filename_alt = argv[1];
      } else {
        stat->label("Error loading file!");
      }
    } // if
    DBG
    browser->add_world_changed_callback( worldChangedCB );
    worldChangedCB( openvrml::browser::replace_world_id );
    DBG
    viewer = new ViewerFLTK( *browser, canvas );
    canvas->setViewerPtr( viewer );
    o->end();
  }
  w->resizable(tag_texts);
  w->show();
  canvas->hide();
  viewer->Hok=1;
  viewer->Hdraw=1;
  viewer->timerUpdate();
  viewer->handleRedraw();
  Fl::add_timeout(0.01, (void (*)(void *))timeIT, (void *)viewer);

  Fl::scheme(NULL);
  Fl_File_Icon::load_system_icons();
  if (argc > 1)
    open (false);
  w->show(argc, argv);
  return Fl::run();
}

std::string open(int interaktiv) {
  #include "icc_vrml.h"

  std::string filename = filename_alt;
  //Fl_File_Icon	*icon;	// New file icon
  DBG
  load_progress->show ();    load_progress->value (0.0);
  char vrmlDatei[] = "/tmp/tmp_vrml.wrl";

  if (interaktiv)
    filename=fl_file_chooser("Wähle ICC Profil?", "ICC Farbprofile (*.[I,i][C,c][M,m,C,c])", filename_alt.c_str());
  DBG cout << filename_alt << endl;

  if (filename == "") {
    load_progress->hide ();
    return "";
  }

  // Laden
  profile.load (filename);
  // Register the ICC type ...
  //Fl_Shared_Image::add_handler(icc_check);
  //Fl_Shared_Image::add_handler(ps_check);

  std::vector<std::string> url;
  std::vector<std::string> param;

  if (browser && (filename != "")) { DBG

    create_vrml ( filename.c_str(), "/usr/share/color/icc/sRGB.icm", &vrmlDatei[0]);

    load_progress->value (0.8);
    filename_alt = filename;
    url.push_back (&vrmlDatei[0]);
    browser->load_url(url, param);
    sprintf (statlabel, "%s geladen", filename.c_str());
    cout << statlabel << endl; DBG
    stat->label(statlabel);
  } else {
    stat->label("Error loading file!");
  } DBG

  stat->hide();
  stat->show();
  load_progress->value (1.0);
  viewer->timerUpdate();
  viewer->handleRedraw();
  load_progress->value (0.0);
  load_progress->hide();
  DBG

  tag_browser->reopen ();

  return filename;
}

void quit(void) {
  Fl::remove_timeout((void (*)(void *))timeIT, (void *)viewer);
  delete viewer;
  delete browser;
  delete canvas;
  details->hide();
  exit(0);
}

void worldChangedCB( const openvrml::browser::cb_reason reason ) {
  switch (reason)
    {
        case openvrml::browser::destroy_world_id:
            delete browser;
            delete viewer;
            Fl::remove_timeout((void (*)(void *))timeIT, (void *)viewer);
            exit(0);
            break;
        case openvrml::browser::replace_world_id: DBG
            if (setTitleUrl) { DBG
                stat->label(statlabel);//browser->world_url().c_str());
            }
            //buildViewpointMenu();
            break;
            DBG
    }
}

void timeIT() {
  if (canvas->LeftViewer == 0) {
    viewer->timerUpdate();
    viewer->handleRedraw();
  }
  Fl::add_timeout(0.01, (void (*)(void *))timeIT, (void *)viewer);
}

char* icc_read_info(char* filename) {
  char systemBefehl[1024];
  char *textfile = "/tmp/icc_temp.txt";


  sprintf (systemBefehl, "iccdump \"%s\" > %s",
                                    filename, textfile);
  system (systemBefehl);

  return textfile;
}

TagBrowser::TagBrowser(int X,int Y,int W,int H,char* start_info) : Fl_Hold_Browser(X,Y,W,H,start_info), X(X), Y(Y), W(W), H(H) {
}

void TagBrowser::reopen() {
  //open and preparing the first selected item
  std::stringstream s;
  std::string text;
  std::vector<std::string> tag_list = profile.printTags();

  #define add_s(stream) s << stream; add (s.str().c_str()); s.str("");
  #define add_          s << " ";

  clear();
  add_s ("@fDateiname:")
  add_s ("@b    " << profile.filename() )
  add_s ("")
  if (tag_list.size() == 0) {
    add_s ("keine Inhalte gefunden fŸr \"" << profile.filename() << "\"")
    return;
  }
  add_s ("@B26@tNr. Bezeichner  Typ         Größe Beschreibung")
  add_s ("@t" << profile.printHeader() )
  DBG
  std::vector<std::string>::iterator it;
  for (it = tag_list.begin() ; it != tag_list.end(); ++it) {
    s << "@t";
    // Nummer
    int Nr = atoi((*it).c_str()) + 1;
    stringstream t; t << Nr;
    for (int i = t.str().size(); i < 3; i++) {s << " ";} s << Nr; *it++; s << " "; 
    // Name/Bezeichnung
    s << *it; for (int i = (*it++).size(); i < 12; i++) {s << " ";}
    // Typ
    s << *it; for (int i = (*it++).size(); i < 12; i++) {s << " ";}
    // Gršße
    for (int i = (*it).size(); i < 5; i++) {s << " ";} s << *it++; s << " ";
    // Beschreibung
    add_s (*it)
  }
  DBG
  if (value())
    select_item (value()); // Anzeigen
  else
    select_item (1);

  if (profile.hasTagName (selectedTagName)) {
    int item = profile.getTagByName (selectedTagName) + 6;
    select_item (item);
    value(item);
  }

  s.clear(); s << "ICC Details: " << profile.filename();
  details->label( (const char*) s.str().c_str() );
}

void TagBrowser::select_item(int item) {
  //Auswahl aus tag_browser
  std::string text = _("Leer");
  tag_texts->hinein(text);
  item -= 6;
  cout << item << ". Tag "; DBG
  std::vector<std::string> rgb_tags;
  rgb_tags.push_back("rXYZ");
  rgb_tags.push_back("gXYZ");
  rgb_tags.push_back("bXYZ");

  if (item < 0) {
    select(5);
    text = profile.printLongHeader(); DBG
    tag_texts->hinein(text);    
  } else if (item >= 0) {
    std::vector<std::string> TagInfo = profile.printTagInfo(item);
    cout << TagInfo.size() << " " << TagInfo[0] << TagInfo[1] << " "; DBG

    if        ( TagInfo[1] == "text"
             || TagInfo[1] == "cprt?"
             || TagInfo[1] == "meas"
             || TagInfo[1] == "sig"
             || TagInfo[1] == "dtim") {
      tag_texts->hinein ( profile.getTagText (item) ); DBG
    } else if ( TagInfo[1] == "desc" ) {
      tag_texts->hinein( (profile.getTagDescription (item))[0] ); DBG
    } else if ( TagInfo[0] == "rXYZ" || TagInfo[0] == "gXYZ" || TagInfo[0] == "bXYZ" ) {
      std::vector<double> alle_punkte, punkte;
      std::vector<std::string> alle_texte;
      std::string TagName;
      for (unsigned int i_name = 0; i_name < rgb_tags.size(); i_name++) {
        if (profile.hasTagName (rgb_tags[i_name])) {
          punkte = profile.getTagCIEXYZ (profile.getTagByName(rgb_tags[i_name]));
          for (unsigned int i = 0; i < 3; i++)
            alle_punkte.push_back (punkte[i]);
          TagInfo = profile.printTagInfo (profile.getTagByName(rgb_tags[i_name]));
          for (unsigned int i = 0; i < 2; i++)
            alle_texte.push_back (TagInfo[i]);
        }
      }
      tag_viewer->hinein_punkt( alle_punkte, alle_texte );
    } else if ( TagInfo[1] == "curv"
             || TagInfo[1] == "bfd"
             || TagInfo[1] == "vcgt" ) {
      std::vector<std::vector<double> > kurven;
      std::vector<double> kurve;
      std::vector<std::string> texte;
      std::string TagName;
      for (int i_name = 0; i_name < profile.tagCount(); i_name++) {
        if ( (profile.printTagInfo(i_name))[1] == "curv"
          || (profile.printTagInfo(i_name))[1] == "bfd"
          || (profile.printTagInfo(i_name))[1] == "vcgt" ) {
          kurve = profile.getTagCurve (i_name);
          kurven.push_back (kurve);
          TagInfo = profile.printTagInfo (i_name);
          for (unsigned int i = 0; i < 2; i++)
            texte.push_back (TagInfo[i]);
        }
      }
      tag_viewer->hinein_kurven( kurven, texte );
    } else if ( TagInfo[1] == "chrm"
             || TagInfo[1] == "XYZ" ) {
      tag_viewer->hinein_punkt( profile.getTagCIEXYZ(item), TagInfo );
    } else if ( TagInfo[1] == "mft2"
             || TagInfo[1] == "mft1" ) {
      tag_viewer->hide();
      tag_texts->hide();
      canvas->show();
    }
    selectedTagName = TagInfo[0];
  }DBG
}

TagTexts::TagTexts(int X,int Y,int W,int H,char* start_info) : Fl_Hold_Browser(X,Y,W,H,start_info), X(X), Y(Y), W(W), H(H) {
}

void TagTexts::hinein(std::string text) {
  //Text aus tag_browser anzeigen

  canvas->hide(); DBG
  tag_viewer->hide(); DBG
  tag_viewer->clear_visible(); DBG
  tag_texts->show(); DBG

      tag_texts->clear();
      int len = strlen(text.c_str());
      std::string text_line;
      char c;
      const char *chars = text.c_str();
      for (int zeichen = 0; zeichen < len; zeichen++) {
        c = chars[zeichen];
        if (c == '\n' || (int)c == 0) {
          text_line += '\0';
          tag_texts->add(text_line.c_str(), 0);
          text_line.clear();
        } else
          text_line += c;
      }
      if (text_line.size() > 0)
        tag_texts->add(text_line.c_str(), 0);

      tag_texts->topline(0);
      tag_texts->textfont(FL_COURIER);
      tag_texts->textsize(14);
}

TagDrawings::TagDrawings(int X,int Y,int W,int H) : Fl_Widget(X,Y,W,H), X(X), Y(Y), W(W), H(H) {
}

void TagDrawings::draw() {
  // Kurven oder Punkte malen
  cout << punkte.size() << " " << kurven.size() << " "; DBG

  if (punkte.size() >= 3) {
    wiederholen = true;
    draw_cie_shoe(x(),y(),w(),h(),texte,punkte,false);
    Fl::add_timeout( 1.2, (void(*)(void*))d_haendler ,(void*)this);

  } else {
    wiederholen = false;
    draw_kurve   (x(),y(),w(),h(),texte,kurven);
  }
  //DBG
}

void TagDrawings::hinein_punkt(std::vector<double> vect, std::vector<std::string> txt) {
  //CIExyY aus tag_browser anzeigen
  punkte.clear();
  for (unsigned int i = 0; i < vect.size(); i++)
    punkte.push_back (vect[i]);
  texte.clear();
  for (unsigned int i = 0; i < txt.size(); i++)
    texte.push_back (txt[i]);
  kurven.clear();

  canvas->hide(); DBG
  tag_viewer->show(); DBG
  tag_texts->hide(); DBG
}

void TagDrawings::hinein_kurven(std::vector<std::vector<double> >vect, std::vector<std::string> txt) {
  //Kurve aus tag_browser anzeigen
  kurven = vect;
  texte = txt;
  punkte.clear();

  canvas->hide(); DBG
  tag_viewer->show(); DBG
  tag_texts->hide(); DBG
}

void TagDrawings::ruhig_neuzeichnen(void) {
  draw_cie_shoe(x(),y(),w(),h(),texte,punkte,true);
}

void d_haendler(void* o) {
  Fl::remove_timeout( (void(*)(void*))d_haendler, 0 );
  if (!Fl::has_timeout( (void(*)(void*))d_haendler, 0 )
   && ((TagDrawings*)o)->active()
   && ((TagDrawings*)o)->visible_r()
   && ((TagDrawings*)o)->wiederholen) {
    ((TagDrawings*)o)->ruhig_neuzeichnen();
    #ifdef DEBUG
    cout << " wiederholen"; DBG
    #endif
  }
}
